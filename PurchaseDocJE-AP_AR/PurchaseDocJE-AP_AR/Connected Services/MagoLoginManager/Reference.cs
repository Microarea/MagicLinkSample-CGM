//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PurchaseDocJE_AP_AR.MagoLoginManager {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://microarea.it/LoginManager/", ConfigurationName="MagoLoginManager.MicroareaLoginManagerSoap")]
    public interface MicroareaLoginManagerSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SetMessageRead", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SetMessageRead(string userName, string messageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SetMessageRead", ReplyAction="*")]
        System.Threading.Tasks.Task SetMessageReadAsync(string userName, string messageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetImmediateMessagesQueue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.Advertisement[] GetImmediateMessagesQueue(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetImmediateMessagesQueue", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.Advertisement[]> GetImmediateMessagesQueueAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetMessagesQueue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.Advertisement[] GetMessagesQueue(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetMessagesQueue", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.Advertisement[]> GetMessagesQueueAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetOldMessages", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.Advertisement[] GetOldMessages(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetOldMessages", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.Advertisement[]> GetOldMessagesAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/DeleteMessageFromQueue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        void DeleteMessageFromQueue(string messageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/DeleteMessageFromQueue", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteMessageFromQueueAsync(string messageID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/PurgeMessageByTag", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        void PurgeMessageByTag(string tag, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/PurgeMessageByTag", ReplyAction="*")]
        System.Threading.Tasks.Task PurgeMessageByTagAsync(string tag, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SendAccessMail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool SendAccessMail();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SendAccessMail", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SendAccessMailAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetAspNetUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetAspNetUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetAspNetUser", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetAspNetUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetConfigurationHash", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetConfigurationHash();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetConfigurationHash", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetConfigurationHashAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/UserCanAccessWebSitePrivateArea", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool UserCanAccessWebSitePrivateArea(int loginId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/UserCanAccessWebSitePrivateArea", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> UserCanAccessWebSitePrivateAreaAsync(int loginId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsEasyBuilderDeveloper", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool IsEasyBuilderDeveloper(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsEasyBuilderDeveloper", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsEasyBuilderDeveloperAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SendErrorFile", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.SendErrorFileResponse SendErrorFile(PurchaseDocJE_AP_AR.MagoLoginManager.SendErrorFileRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SendErrorFile", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.SendErrorFileResponse> SendErrorFileAsync(PurchaseDocJE_AP_AR.MagoLoginManager.SendErrorFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/DownloadPdb", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.DownloadPdbResponse DownloadPdb(PurchaseDocJE_AP_AR.MagoLoginManager.DownloadPdbRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/DownloadPdb", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.DownloadPdbResponse> DownloadPdbAsync(PurchaseDocJE_AP_AR.MagoLoginManager.DownloadPdbRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetMainSerialNumber", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetMainSerialNumber();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetMainSerialNumber", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetMainSerialNumberAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetServiceJson", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetServiceJson();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetServiceJson", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetServiceJsonAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetMLUExpiryDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetMLUExpiryDate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetMLUExpiryDate", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetMLUExpiryDateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SendBalloon", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        void SendBalloon(string authenticationToken, string bodyMessage, PurchaseDocJE_AP_AR.MagoLoginManager.MessageType messageType, string[] recipients);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SendBalloon", ReplyAction="*")]
        System.Threading.Tasks.Task SendBalloonAsync(string authenticationToken, string bodyMessage, PurchaseDocJE_AP_AR.MagoLoginManager.MessageType messageType, string[] recipients);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/AdvancedSendBalloon", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        void AdvancedSendBalloon(string authenticationToken, string bodyMessage, System.DateTime expiryDate, int messageType, string[] recipients, int sensation, bool historicize, bool immediate, int timer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/AdvancedSendBalloon", ReplyAction="*")]
        System.Threading.Tasks.Task AdvancedSendBalloonAsync(string authenticationToken, string bodyMessage, System.DateTime expiryDate, int messageType, string[] recipients, int sensation, bool historicize, bool immediate, int timer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/AdvancedSendTaggedBalloon", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        void AdvancedSendTaggedBalloon(string authenticationToken, string bodyMessage, System.DateTime expiryDate, int messageType, string[] recipients, int sensation, bool historicize, bool immediate, int timer, string tag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/AdvancedSendTaggedBalloon", ReplyAction="*")]
        System.Threading.Tasks.Task AdvancedSendTaggedBalloonAsync(string authenticationToken, string bodyMessage, System.DateTime expiryDate, int messageType, string[] recipients, int sensation, bool historicize, bool immediate, int timer, string tag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SetChannelFree", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool SetChannelFree(string authenticationToken, string[] channelCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SetChannelFree", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetChannelFreeAsync(string authenticationToken, string[] channelCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetChannelFree", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool GetChannelFree();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetChannelFree", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> GetChannelFreeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/M4PKStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        int M4PKStatus(string id, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/M4PKStatus", ReplyAction="*")]
        System.Threading.Tasks.Task<int> M4PKStatusAsync(string id, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetEditionType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetEditionType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetEditionType", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetEditionTypeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetTokensByProcessName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string[] GetTokensByProcessName(string processName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetTokensByProcessName", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetTokensByProcessNameAsync(string processName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/Init", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        int Init(bool reboot, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/Init", ReplyAction="*")]
        System.Threading.Tasks.Task<int> InitAsync(bool reboot, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsAlive", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool IsAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsAlive", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsAliveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/Test", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string Test(string valore);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/Test", ReplyAction="*")]
        System.Threading.Tasks.Task<string> TestAsync(string valore);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/VerifyDBSize", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool VerifyDBSize();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/VerifyDBSize", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> VerifyDBSizeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetMobileToken", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetMobileToken(string token, int loginType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetMobileToken", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetMobileTokenAsync(string token, int loginType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/RefreshWMSSlot", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool RefreshWMSSlot(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/RefreshWMSSlot", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RefreshWMSSlotAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsCalAvailable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool IsCalAvailable(string authenticationToken, string application, string functionality);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsCalAvailable", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsCalAvailableAsync(string authenticationToken, string application, string functionality);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsValidDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.IsValidDateResponse IsValidDate(PurchaseDocJE_AP_AR.MagoLoginManager.IsValidDateRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsValidDate", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.IsValidDateResponse> IsValidDateAsync(PurchaseDocJE_AP_AR.MagoLoginManager.IsValidDateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/PingNeeded", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool PingNeeded(bool force);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/PingNeeded", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> PingNeededAsync(bool force);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SetClientData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        void SetClientData(PurchaseDocJE_AP_AR.MagoLoginManager.ClientData cd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SetClientData", ReplyAction="*")]
        System.Threading.Tasks.Task SetClientDataAsync(PurchaseDocJE_AP_AR.MagoLoginManager.ClientData cd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SetCompanyInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool SetCompanyInfo(string authToken, string aName, string aValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SetCompanyInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SetCompanyInfoAsync(string authToken, string aName, string aValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsActivated", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool IsActivated(string application, string functionality);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsActivated", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsActivatedAsync(string application, string functionality);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsSynchActivation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool IsSynchActivation();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsSynchActivation", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsSynchActivationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetModules", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string[] GetModules();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetModules", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetModulesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCompanyUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string[] GetCompanyUsers(string companyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCompanyUsers", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetCompanyUsersAsync(string companyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetNonNTCompanyUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string[] GetNonNTCompanyUsers(string companyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetNonNTCompanyUsers", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetNonNTCompanyUsersAsync(string companyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCompanyRoles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string[] GetCompanyRoles(string companyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCompanyRoles", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetCompanyRolesAsync(string companyName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsESPLogin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool IsESPLogin(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsESPLogin", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsESPLoginAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsServiceAccess", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool IsServiceAccess(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsServiceAccess", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsServiceAccessAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/HasUserEBRoles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool HasUserEBRoles(int companyName, int userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/HasUserEBRoles", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> HasUserEBRolesAsync(int companyName, int userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetUserRoles", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string[] GetUserRoles(string companyName, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetUserRoles", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetUserRolesAsync(string companyName, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/EnumAllUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string[] EnumAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/EnumAllUsers", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> EnumAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/EnumAllCompanyUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string[] EnumAllCompanyUsers(int companyId, bool onlyNonNTUsers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/EnumAllCompanyUsers", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> EnumAllCompanyUsersAsync(int companyId, bool onlyNonNTUsers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetRoleUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string[] GetRoleUsers(string companyName, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetRoleUsers", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetRoleUsersAsync(string companyName, string roleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/EnumCompanies", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string[] EnumCompanies(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/EnumCompanies", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> EnumCompaniesAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsIntegratedSecurityUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool IsIntegratedSecurityUser(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsIntegratedSecurityUser", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsIntegratedSecurityUserAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetLoggedUsersNumber", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        int GetLoggedUsersNumber();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetLoggedUsersNumber", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetLoggedUsersNumberAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCompanyLoggedUsersNumber", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        int GetCompanyLoggedUsersNumber(int companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCompanyLoggedUsersNumber", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetCompanyLoggedUsersNumberAsync(int companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetLoggedUsers", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetLoggedUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetLoggedUsers", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetLoggedUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetLoggedUsersAdvanced", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetLoggedUsersAdvanced(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetLoggedUsersAdvanced", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetLoggedUsersAdvancedAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCalNumber", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumberResponse GetCalNumber(PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumberRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCalNumber", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumberResponse> GetCalNumberAsync(PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumberRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCalNumber2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumber2Response GetCalNumber2(PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumber2Request request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCalNumber2", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumber2Response> GetCalNumber2Async(PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumber2Request request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCalNumber3", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumber3Response GetCalNumber3(PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumber3Request request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCalNumber3", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumber3Response> GetCalNumber3Async(PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumber3Request request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetTokenProcessType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        int GetTokenProcessType(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetTokenProcessType", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetTokenProcessTypeAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ReloadConfiguration", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        void ReloadConfiguration();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ReloadConfiguration", ReplyAction="*")]
        System.Threading.Tasks.Task ReloadConfigurationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ValidateUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.ValidateUserResponse ValidateUser(PurchaseDocJE_AP_AR.MagoLoginManager.ValidateUserRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ValidateUser", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.ValidateUserResponse> ValidateUserAsync(PurchaseDocJE_AP_AR.MagoLoginManager.ValidateUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ConsumeMobileCal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        int ConsumeMobileCal(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ConsumeMobileCal", ReplyAction="*")]
        System.Threading.Tasks.Task<int> ConsumeMobileCalAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ConsumeInStoreCal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        int ConsumeInStoreCal(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ConsumeInStoreCal", ReplyAction="*")]
        System.Threading.Tasks.Task<int> ConsumeInStoreCalAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ChangePassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        int ChangePassword(string userName, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ChangePassword", ReplyAction="*")]
        System.Threading.Tasks.Task<int> ChangePasswordAsync(string userName, string oldPassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/LoginCompact", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.LoginCompactResponse LoginCompact(PurchaseDocJE_AP_AR.MagoLoginManager.LoginCompactRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/LoginCompact", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.LoginCompactResponse> LoginCompactAsync(PurchaseDocJE_AP_AR.MagoLoginManager.LoginCompactRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SSOLogOff", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        void SSOLogOff(string cryptedToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SSOLogOff", ReplyAction="*")]
        System.Threading.Tasks.Task SSOLogOffAsync(string cryptedToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/LoginViaInfinityToken2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.LoginViaInfinityToken2Response LoginViaInfinityToken2(PurchaseDocJE_AP_AR.MagoLoginManager.LoginViaInfinityToken2Request request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/LoginViaInfinityToken2", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.LoginViaInfinityToken2Response> LoginViaInfinityToken2Async(PurchaseDocJE_AP_AR.MagoLoginManager.LoginViaInfinityToken2Request request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetIToken", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetIToken(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetIToken", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetITokenAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetPATToken", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetPATToken(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetPATToken", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetPATTokenAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetServiceUserPasswordExpiration", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetServiceUserPasswordExpiration();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetServiceUserPasswordExpiration", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetServiceUserPasswordExpirationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ExistsSSOIDUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool ExistsSSOIDUser(string cryptedToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ExistsSSOIDUser", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> ExistsSSOIDUserAsync(string cryptedToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/LoginCheck", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        int LoginCheck(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/LoginCheck", ReplyAction="*")]
        System.Threading.Tasks.Task<int> LoginCheckAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/Login", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.LoginResponse Login(PurchaseDocJE_AP_AR.MagoLoginManager.LoginRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/Login", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.LoginResponse> LoginAsync(PurchaseDocJE_AP_AR.MagoLoginManager.LoginRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/Login2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.Login2Response Login2(PurchaseDocJE_AP_AR.MagoLoginManager.Login2Request request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/Login2", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.Login2Response> Login2Async(PurchaseDocJE_AP_AR.MagoLoginManager.Login2Request request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ConfirmToken", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool ConfirmToken(string authenticationToken, string procType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ConfirmToken", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> ConfirmTokenAsync(string authenticationToken, string procType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetLoginInformation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.GetLoginInformationResponse GetLoginInformation(PurchaseDocJE_AP_AR.MagoLoginManager.GetLoginInformationRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetLoginInformation", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.GetLoginInformationResponse> GetLoginInformationAsync(PurchaseDocJE_AP_AR.MagoLoginManager.GetLoginInformationRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/LogOff", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        void LogOff(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/LogOff", ReplyAction="*")]
        System.Threading.Tasks.Task LogOffAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetUserName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetUserName(int loginId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetUserName", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetUserNameAsync(int loginId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetUserDescriptionById", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetUserDescriptionById(int loginId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetUserDescriptionById", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetUserDescriptionByIdAsync(int loginId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetUserDescriptionByName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetUserDescriptionByName(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetUserDescriptionByName", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetUserDescriptionByNameAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetUserEMailByName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetUserEMailByName(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetUserEMailByName", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetUserEMailByNameAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsFloatingUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.IsFloatingUserResponse IsFloatingUser(PurchaseDocJE_AP_AR.MagoLoginManager.IsFloatingUserRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsFloatingUser", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.IsFloatingUserResponse> IsFloatingUserAsync(PurchaseDocJE_AP_AR.MagoLoginManager.IsFloatingUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsWebUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.IsWebUserResponse IsWebUser(PurchaseDocJE_AP_AR.MagoLoginManager.IsWebUserRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsWebUser", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.IsWebUserResponse> IsWebUserAsync(PurchaseDocJE_AP_AR.MagoLoginManager.IsWebUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsWinNT", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool IsWinNT(int loginId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsWinNT", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsWinNTAsync(int loginId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetDbOwner", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetDbOwner(int companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetDbOwner", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDbOwnerAsync(int companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsCompanySecured", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool IsCompanySecured(int companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsCompanySecured", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsCompanySecuredAsync(int companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetAuthenticationInformations", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.GetAuthenticationInformationsResponse GetAuthenticationInformations(PurchaseDocJE_AP_AR.MagoLoginManager.GetAuthenticationInformationsRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetAuthenticationInformations", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.GetAuthenticationInformationsResponse> GetAuthenticationInformationsAsync(PurchaseDocJE_AP_AR.MagoLoginManager.GetAuthenticationInformationsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetAuthenticationNames", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.GetAuthenticationNamesResponse GetAuthenticationNames(PurchaseDocJE_AP_AR.MagoLoginManager.GetAuthenticationNamesRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetAuthenticationNames", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.GetAuthenticationNamesResponse> GetAuthenticationNamesAsync(PurchaseDocJE_AP_AR.MagoLoginManager.GetAuthenticationNamesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/DeleteAssociation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool DeleteAssociation(int loginId, int companyId, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/DeleteAssociation", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> DeleteAssociationAsync(int loginId, int companyId, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/DeleteUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool DeleteUser(int loginId, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/DeleteUser", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(int loginId, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/DeleteCompany", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool DeleteCompany(int companyId, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/DeleteCompany", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> DeleteCompanyAsync(int companyId, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetSystemDBConnectionString", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetSystemDBConnectionString(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetSystemDBConnectionString", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetSystemDBConnectionStringAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetDMSConnectionString", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetDMSConnectionString(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetDMSConnectionString", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDMSConnectionStringAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/Sql2012Allowed", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool Sql2012Allowed(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/Sql2012Allowed", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> Sql2012AllowedAsync(string authToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SetDefaultSchema", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.SetDefaultSchemaResponse SetDefaultSchema(PurchaseDocJE_AP_AR.MagoLoginManager.SetDefaultSchemaRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SetDefaultSchema", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.SetDefaultSchemaResponse> SetDefaultSchemaAsync(PurchaseDocJE_AP_AR.MagoLoginManager.SetDefaultSchemaRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetDMSDatabasesInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.DmsDatabaseInfo[] GetDMSDatabasesInfo(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetDMSDatabasesInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.DmsDatabaseInfo[]> GetDMSDatabasesInfoAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetDataSynchroDatabasesInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.DataSynchroDatabaseInfo[] GetDataSynchroDatabasesInfo(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetDataSynchroDatabasesInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.DataSynchroDatabaseInfo[]> GetDataSynchroDatabasesInfoAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCompanyDatabasesInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.TbSenderDatabaseInfo[] GetCompanyDatabasesInfo(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCompanyDatabasesInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.TbSenderDatabaseInfo[]> GetCompanyDatabasesInfoAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetEdition", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetEdition();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetEdition", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetEditionAsync();
        
        // CODEGEN: Parameter 'GetConfigurationStreamResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetConfigurationStream", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.GetConfigurationStreamResponse GetConfigurationStream(PurchaseDocJE_AP_AR.MagoLoginManager.GetConfigurationStreamRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetConfigurationStream", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.GetConfigurationStreamResponse> GetConfigurationStreamAsync(PurchaseDocJE_AP_AR.MagoLoginManager.GetConfigurationStreamRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCountry", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetCountry();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCountry", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetCountryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetProviderNameFromCompanyId", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetProviderNameFromCompanyId(int companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetProviderNameFromCompanyId", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetProviderNameFromCompanyIdAsync(int companyId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetInstallationVersion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.GetInstallationVersionResponse GetInstallationVersion(PurchaseDocJE_AP_AR.MagoLoginManager.GetInstallationVersionRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetInstallationVersion", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.GetInstallationVersionResponse> GetInstallationVersionAsync(PurchaseDocJE_AP_AR.MagoLoginManager.GetInstallationVersionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetUserInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetUserInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetUserInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetUserInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetUserInfoID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetUserInfoID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetUserInfoID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetUserInfoIDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/TraceAction", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        void TraceAction(string company, string login, int type, string processName, string winUser, string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/TraceAction", ReplyAction="*")]
        System.Threading.Tasks.Task TraceActionAsync(string company, string login, int type, string processName, string winUser, string location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/HasUserAlreadyChangedPasswordToday", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool HasUserAlreadyChangedPasswordToday(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/HasUserAlreadyChangedPasswordToday", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> HasUserAlreadyChangedPasswordTodayAsync(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetBrandedApplicationTitle", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetBrandedApplicationTitle(string application);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetBrandedApplicationTitle", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetBrandedApplicationTitleAsync(string application);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetMasterProductBrandedName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetMasterProductBrandedName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetMasterProductBrandedName", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetMasterProductBrandedNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetMasterSolutionBrandedName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetMasterSolutionBrandedName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetMasterSolutionBrandedName", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetMasterSolutionBrandedNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetMasterSolution", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetMasterSolution();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetMasterSolution", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetMasterSolutionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetBrandedProducerName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetBrandedProducerName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetBrandedProducerName", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetBrandedProducerNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetBrandedProductTitle", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetBrandedProductTitle();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetBrandedProductTitle", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetBrandedProductTitleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetBrandedKey", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetBrandedKey(string source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetBrandedKey", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetBrandedKeyAsync(string source);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetDBNetworkType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.DBNetworkType GetDBNetworkType();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetDBNetworkType", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.DBNetworkType> GetDBNetworkTypeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetDatabaseType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetDatabaseType(string providerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetDatabaseType", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDatabaseTypeAsync(string providerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/CanUseNamespace", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool CanUseNamespace(string nameSpace, string authenticationToken, PurchaseDocJE_AP_AR.MagoLoginManager.GrantType grantType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/CanUseNamespace", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> CanUseNamespaceAsync(string nameSpace, string authenticationToken, PurchaseDocJE_AP_AR.MagoLoginManager.GrantType grantType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/CacheCounter", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool CacheCounter();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/CacheCounter", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> CacheCounterAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/CacheCounterGTG", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.SerialNumberType CacheCounterGTG();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/CacheCounterGTG", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.SerialNumberType> CacheCounterGTGAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SetCurrentComponents", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.SetCurrentComponentsResponse SetCurrentComponents(PurchaseDocJE_AP_AR.MagoLoginManager.SetCurrentComponentsRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SetCurrentComponents", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.SetCurrentComponentsResponse> SetCurrentComponentsAsync(PurchaseDocJE_AP_AR.MagoLoginManager.SetCurrentComponentsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsVirginActivation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool IsVirginActivation();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsVirginActivation", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsVirginActivationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/HD", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        int HD();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/HD", ReplyAction="*")]
        System.Threading.Tasks.Task<int> HDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/StoreMLUChoice", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        void StoreMLUChoice(bool userChoseMluInChargeToMicroarea);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/StoreMLUChoice", ReplyAction="*")]
        System.Threading.Tasks.Task StoreMLUChoiceAsync(bool userChoseMluInChargeToMicroarea);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SaveLicensed", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool SaveLicensed(string xml, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SaveLicensed", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SaveLicensedAsync(string xml, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ValidateIToken", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string ValidateIToken(string itoken, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ValidateIToken", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ValidateITokenAsync(string itoken, string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SaveUserInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool SaveUserInfo(string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SaveUserInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SaveUserInfoAsync(string xml);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/DeleteUserInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        void DeleteUserInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/DeleteUserInfo", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteUserInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/DeleteLicensed", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        void DeleteLicensed(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/DeleteLicensed", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteLicensedAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/PrePing", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string PrePing();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/PrePing", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PrePingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/Ping", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string Ping();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/Ping", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetArticlesWithNamedCal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.ModuleNameInfo[] GetArticlesWithNamedCal();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetArticlesWithNamedCal", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.ModuleNameInfo[]> GetArticlesWithNamedCalAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetArticlesWithFloatingCal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.ModuleNameInfo[] GetArticlesWithFloatingCal();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetArticlesWithFloatingCal", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.ModuleNameInfo[]> GetArticlesWithFloatingCalAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/RefreshFloatingMark", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        void RefreshFloatingMark();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/RefreshFloatingMark", ReplyAction="*")]
        System.Threading.Tasks.Task RefreshFloatingMarkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/RefreshSecurityStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        void RefreshSecurityStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/RefreshSecurityStatus", ReplyAction="*")]
        System.Threading.Tasks.Task RefreshSecurityStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetProxySupportVersion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        int GetProxySupportVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetProxySupportVersion", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetProxySupportVersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetProxySettings", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.ProxySettings GetProxySettings();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetProxySettings", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.ProxySettings> GetProxySettingsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SetProxySettings", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        void SetProxySettings(PurchaseDocJE_AP_AR.MagoLoginManager.ProxySettings proxySettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/SetProxySettings", ReplyAction="*")]
        System.Threading.Tasks.Task SetProxySettingsAsync(PurchaseDocJE_AP_AR.MagoLoginManager.ProxySettings proxySettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetUserLanguage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        string GetUserLanguage(string autenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetUserLanguage", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetUserLanguageAsync(string autenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCompanyLanguage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.GetCompanyLanguageResponse GetCompanyLanguage(PurchaseDocJE_AP_AR.MagoLoginManager.GetCompanyLanguageRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCompanyLanguage", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.GetCompanyLanguageResponse> GetCompanyLanguageAsync(PurchaseDocJE_AP_AR.MagoLoginManager.GetCompanyLanguageRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsValidUpToDateToken", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool IsValidUpToDateToken(string authenticationToken, string mluexpired);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsValidUpToDateToken", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsValidUpToDateTokenAsync(string authenticationToken, string mluexpired);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsValidToken", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool IsValidToken(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsValidToken", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsValidTokenAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ReloadUserArticleBindings", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        void ReloadUserArticleBindings(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/ReloadUserArticleBindings", ReplyAction="*")]
        System.Threading.Tasks.Task ReloadUserArticleBindingsAsync(string authenticationToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/FEUsed", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool FEUsed(string authenticationToken, bool val);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/FEUsed", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> FEUsedAsync(string authenticationToken, bool val);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/Sbrill", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool Sbrill(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/Sbrill", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> SbrillAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCalType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        PurchaseDocJE_AP_AR.MagoLoginManager.LoginSlotType GetCalType(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetCalType", ReplyAction="*")]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.LoginSlotType> GetCalTypeAsync(string token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsUserLoggedByName", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool IsUserLoggedByName(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsUserLoggedByName", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsUserLoggedByNameAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsUserLogged", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool IsUserLogged(int loginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsUserLogged", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsUserLoggedAsync(int loginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsSecurityLightEnabled", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool IsSecurityLightEnabled();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsSecurityLightEnabled", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsSecurityLightEnabledAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsSecurityLightAccessAllowed", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        bool IsSecurityLightAccessAllowed(string nameSpace, string authenticationToken, bool unattended);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/IsSecurityLightAccessAllowed", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsSecurityLightAccessAllowedAsync(string nameSpace, string authenticationToken, bool unattended);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetDBCultureLCID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(State))]
        int GetDBCultureLCID(int companyID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://microarea.it/LoginManager/GetDBCultureLCID", ReplyAction="*")]
        System.Threading.Tasks.Task<int> GetDBCultureLCIDAsync(int companyID);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class Advertisement : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int autoClosingTimeField;
        
        private string idField;
        
        private bool hideDisclaimerField;
        
        private bool expireWithRestartField;
        
        private bool historicizeField;
        
        private bool immediateField;
        
        private System.DateTime expiryDateField;
        
        private MessageType typeField;
        
        private string tagField;
        
        private int severityField;
        
        private string[] recipientsField;
        
        private AdvertisementBody bodyTypedField;
        
        private System.DateTime creationDateField;
        
        private MessageSensation sensationField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int AutoClosingTime {
            get {
                return this.autoClosingTimeField;
            }
            set {
                this.autoClosingTimeField = value;
                this.RaisePropertyChanged("AutoClosingTime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("ID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool HideDisclaimer {
            get {
                return this.hideDisclaimerField;
            }
            set {
                this.hideDisclaimerField = value;
                this.RaisePropertyChanged("HideDisclaimer");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool ExpireWithRestart {
            get {
                return this.expireWithRestartField;
            }
            set {
                this.expireWithRestartField = value;
                this.RaisePropertyChanged("ExpireWithRestart");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public bool Historicize {
            get {
                return this.historicizeField;
            }
            set {
                this.historicizeField = value;
                this.RaisePropertyChanged("Historicize");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public bool Immediate {
            get {
                return this.immediateField;
            }
            set {
                this.immediateField = value;
                this.RaisePropertyChanged("Immediate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public System.DateTime ExpiryDate {
            get {
                return this.expiryDateField;
            }
            set {
                this.expiryDateField = value;
                this.RaisePropertyChanged("ExpiryDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public MessageType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
                this.RaisePropertyChanged("Type");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string Tag {
            get {
                return this.tagField;
            }
            set {
                this.tagField = value;
                this.RaisePropertyChanged("Tag");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public int Severity {
            get {
                return this.severityField;
            }
            set {
                this.severityField = value;
                this.RaisePropertyChanged("Severity");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=10)]
        public string[] Recipients {
            get {
                return this.recipientsField;
            }
            set {
                this.recipientsField = value;
                this.RaisePropertyChanged("Recipients");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public AdvertisementBody BodyTyped {
            get {
                return this.bodyTypedField;
            }
            set {
                this.bodyTypedField = value;
                this.RaisePropertyChanged("BodyTyped");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public System.DateTime CreationDate {
            get {
                return this.creationDateField;
            }
            set {
                this.creationDateField = value;
                this.RaisePropertyChanged("CreationDate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public MessageSensation Sensation {
            get {
                return this.sensationField;
            }
            set {
                this.sensationField = value;
                this.RaisePropertyChanged("Sensation");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public enum MessageType {
        
        /// <remarks/>
        None = 1,
        
        /// <remarks/>
        Contract = 2,
        
        /// <remarks/>
        Advrtsm = 4,
        
        /// <remarks/>
        Updates = 8,
        
        /// <remarks/>
        PostaLite = 16,
        
        /// <remarks/>
        Default = 32,
        
        /// <remarks/>
        DataSynch = 64,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class AdvertisementBody : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string textField;
        
        private string linkField;
        
        private string htmlField;
        
        private LocalizationBag localizationBagTypedField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
                this.RaisePropertyChanged("Text");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Link {
            get {
                return this.linkField;
            }
            set {
                this.linkField = value;
                this.RaisePropertyChanged("Link");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Html {
            get {
                return this.htmlField;
            }
            set {
                this.htmlField = value;
                this.RaisePropertyChanged("Html");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public LocalizationBag LocalizationBagTyped {
            get {
                return this.localizationBagTypedField;
            }
            set {
                this.localizationBagTypedField = value;
                this.RaisePropertyChanged("LocalizationBagTyped");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class LocalizationBag : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string keyField;
        
        private string productNameField;
        
        private string userEmailField;
        
        private string daysField;
        
        private long renewalPeriodTicksField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
                this.RaisePropertyChanged("Key");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string ProductName {
            get {
                return this.productNameField;
            }
            set {
                this.productNameField = value;
                this.RaisePropertyChanged("ProductName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string UserEmail {
            get {
                return this.userEmailField;
            }
            set {
                this.userEmailField = value;
                this.RaisePropertyChanged("UserEmail");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Days {
            get {
                return this.daysField;
            }
            set {
                this.daysField = value;
                this.RaisePropertyChanged("Days");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public long RenewalPeriodTicks {
            get {
                return this.renewalPeriodTicksField;
            }
            set {
                this.renewalPeriodTicksField = value;
                this.RaisePropertyChanged("RenewalPeriodTicks");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class FirewallCredentialsSettings : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool needsCredentialsField;
        
        private string domainField;
        
        private string nameField;
        
        private string passwordField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool NeedsCredentials {
            get {
                return this.needsCredentialsField;
            }
            set {
                this.needsCredentialsField = value;
                this.RaisePropertyChanged("NeedsCredentials");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Domain {
            get {
                return this.domainField;
            }
            set {
                this.domainField = value;
                this.RaisePropertyChanged("Domain");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
                this.RaisePropertyChanged("Password");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class ProxyAddress : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string serverField;
        
        private int portField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Server {
            get {
                return this.serverField;
            }
            set {
                this.serverField = value;
                this.RaisePropertyChanged("Server");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int Port {
            get {
                return this.portField;
            }
            set {
                this.portField = value;
                this.RaisePropertyChanged("Port");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProxySettings))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public abstract partial class State : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string verField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ver {
            get {
                return this.verField;
            }
            set {
                this.verField = value;
                this.RaisePropertyChanged("ver");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class ProxySettings : State {
        
        private ProxyAddress httpProxyField;
        
        private ProxyAddress ftpProxyField;
        
        private FirewallCredentialsSettings firewallCredentialsSettingsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ProxyAddress HttpProxy {
            get {
                return this.httpProxyField;
            }
            set {
                this.httpProxyField = value;
                this.RaisePropertyChanged("HttpProxy");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public ProxyAddress FtpProxy {
            get {
                return this.ftpProxyField;
            }
            set {
                this.ftpProxyField = value;
                this.RaisePropertyChanged("FtpProxy");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public FirewallCredentialsSettings FirewallCredentialsSettings {
            get {
                return this.firewallCredentialsSettingsField;
            }
            set {
                this.firewallCredentialsSettingsField = value;
                this.RaisePropertyChanged("FirewallCredentialsSettings");
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class ModuleNameInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string localizedNameField;
        
        private int cALField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string LocalizedName {
            get {
                return this.localizedNameField;
            }
            set {
                this.localizedNameField = value;
                this.RaisePropertyChanged("LocalizedName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int CAL {
            get {
                return this.cALField;
            }
            set {
                this.cALField = value;
                this.RaisePropertyChanged("CAL");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class TbSenderDatabaseInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string connectionStringField;
        
        private int companyIdField;
        
        private string usernameField;
        
        private string passwordField;
        
        private string serverNameField;
        
        private string databaseNameField;
        
        private bool winAuthenticationField;
        
        private string companyField;
        
        private bool isEnabledField;
        
        private string companyCultureField;
        
        private string companyCultureUIField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string ConnectionString {
            get {
                return this.connectionStringField;
            }
            set {
                this.connectionStringField = value;
                this.RaisePropertyChanged("ConnectionString");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int CompanyId {
            get {
                return this.companyIdField;
            }
            set {
                this.companyIdField = value;
                this.RaisePropertyChanged("CompanyId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Username {
            get {
                return this.usernameField;
            }
            set {
                this.usernameField = value;
                this.RaisePropertyChanged("Username");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
                this.RaisePropertyChanged("Password");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string ServerName {
            get {
                return this.serverNameField;
            }
            set {
                this.serverNameField = value;
                this.RaisePropertyChanged("ServerName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string DatabaseName {
            get {
                return this.databaseNameField;
            }
            set {
                this.databaseNameField = value;
                this.RaisePropertyChanged("DatabaseName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public bool WinAuthentication {
            get {
                return this.winAuthenticationField;
            }
            set {
                this.winAuthenticationField = value;
                this.RaisePropertyChanged("WinAuthentication");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
                this.RaisePropertyChanged("Company");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public bool IsEnabled {
            get {
                return this.isEnabledField;
            }
            set {
                this.isEnabledField = value;
                this.RaisePropertyChanged("IsEnabled");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string CompanyCulture {
            get {
                return this.companyCultureField;
            }
            set {
                this.companyCultureField = value;
                this.RaisePropertyChanged("CompanyCulture");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string CompanyCultureUI {
            get {
                return this.companyCultureUIField;
            }
            set {
                this.companyCultureUIField = value;
                this.RaisePropertyChanged("CompanyCultureUI");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public abstract partial class IBaseSynchroProvider : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool isProviderValidField;
        
        private string companyNameField;
        
        private bool isValidationEnabledField;
        
        private bool isInPauseField;
        
        private bool abortField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool IsProviderValid {
            get {
                return this.isProviderValidField;
            }
            set {
                this.isProviderValidField = value;
                this.RaisePropertyChanged("IsProviderValid");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string CompanyName {
            get {
                return this.companyNameField;
            }
            set {
                this.companyNameField = value;
                this.RaisePropertyChanged("CompanyName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public bool IsValidationEnabled {
            get {
                return this.isValidationEnabledField;
            }
            set {
                this.isValidationEnabledField = value;
                this.RaisePropertyChanged("IsValidationEnabled");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public bool IsInPause {
            get {
                return this.isInPauseField;
            }
            set {
                this.isInPauseField = value;
                this.RaisePropertyChanged("IsInPause");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public bool Abort {
            get {
                return this.abortField;
            }
            set {
                this.abortField = value;
                this.RaisePropertyChanged("Abort");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class DataSynchroDatabaseInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string companyConnectionStringField;
        
        private DBMSType companyDBMSTypeField;
        
        private string serverField;
        
        private string databaseField;
        
        private string userField;
        
        private string passwordField;
        
        private bool winAuthenticationField;
        
        private string companyNameField;
        
        private int companyIdField;
        
        private string loginNameField;
        
        private string loginPasswordField;
        
        private bool loginWindowsAuthenticationField;
        
        private int loginIdField;
        
        private bool useDBSlaveField;
        
        private string dmsConnectionStringField;
        
        private IBaseSynchroProvider[] synchroProvidersField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CompanyConnectionString {
            get {
                return this.companyConnectionStringField;
            }
            set {
                this.companyConnectionStringField = value;
                this.RaisePropertyChanged("CompanyConnectionString");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public DBMSType CompanyDBMSType {
            get {
                return this.companyDBMSTypeField;
            }
            set {
                this.companyDBMSTypeField = value;
                this.RaisePropertyChanged("CompanyDBMSType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Server {
            get {
                return this.serverField;
            }
            set {
                this.serverField = value;
                this.RaisePropertyChanged("Server");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Database {
            get {
                return this.databaseField;
            }
            set {
                this.databaseField = value;
                this.RaisePropertyChanged("Database");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string User {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
                this.RaisePropertyChanged("User");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
                this.RaisePropertyChanged("Password");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public bool WinAuthentication {
            get {
                return this.winAuthenticationField;
            }
            set {
                this.winAuthenticationField = value;
                this.RaisePropertyChanged("WinAuthentication");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string CompanyName {
            get {
                return this.companyNameField;
            }
            set {
                this.companyNameField = value;
                this.RaisePropertyChanged("CompanyName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public int CompanyId {
            get {
                return this.companyIdField;
            }
            set {
                this.companyIdField = value;
                this.RaisePropertyChanged("CompanyId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string LoginName {
            get {
                return this.loginNameField;
            }
            set {
                this.loginNameField = value;
                this.RaisePropertyChanged("LoginName");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string LoginPassword {
            get {
                return this.loginPasswordField;
            }
            set {
                this.loginPasswordField = value;
                this.RaisePropertyChanged("LoginPassword");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public bool LoginWindowsAuthentication {
            get {
                return this.loginWindowsAuthenticationField;
            }
            set {
                this.loginWindowsAuthenticationField = value;
                this.RaisePropertyChanged("LoginWindowsAuthentication");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public int LoginId {
            get {
                return this.loginIdField;
            }
            set {
                this.loginIdField = value;
                this.RaisePropertyChanged("LoginId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public bool UseDBSlave {
            get {
                return this.useDBSlaveField;
            }
            set {
                this.useDBSlaveField = value;
                this.RaisePropertyChanged("UseDBSlave");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public string DmsConnectionString {
            get {
                return this.dmsConnectionStringField;
            }
            set {
                this.dmsConnectionStringField = value;
                this.RaisePropertyChanged("DmsConnectionString");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(Order=15)]
        public IBaseSynchroProvider[] SynchroProviders {
            get {
                return this.synchroProvidersField;
            }
            set {
                this.synchroProvidersField = value;
                this.RaisePropertyChanged("SynchroProviders");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public enum DBMSType {
        
        /// <remarks/>
        UNKNOWN,
        
        /// <remarks/>
        SQLSERVER,
        
        /// <remarks/>
        ORACLE,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class DmsDatabaseInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string companyConnectionStringField;
        
        private DBMSType companyDBMSTypeField;
        
        private string dMSConnectionStringField;
        
        private string serverField;
        
        private string databaseField;
        
        private string companyField;
        
        private int companyIdField;
        
        private int lCIDField;
        
        private bool isFTSEnabledField;
        
        private bool useFTSField;
        
        private bool isAlreadyAnalyzedField;
        
        private string extensionTypeCollateField;
        
        private string fulltextDocumentTypesCollateField;
        
        private bool isSOSActivatedField;
        
        private System.DateTime lastSOSUpdateDateTimeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string CompanyConnectionString {
            get {
                return this.companyConnectionStringField;
            }
            set {
                this.companyConnectionStringField = value;
                this.RaisePropertyChanged("CompanyConnectionString");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public DBMSType CompanyDBMSType {
            get {
                return this.companyDBMSTypeField;
            }
            set {
                this.companyDBMSTypeField = value;
                this.RaisePropertyChanged("CompanyDBMSType");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string DMSConnectionString {
            get {
                return this.dMSConnectionStringField;
            }
            set {
                this.dMSConnectionStringField = value;
                this.RaisePropertyChanged("DMSConnectionString");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string Server {
            get {
                return this.serverField;
            }
            set {
                this.serverField = value;
                this.RaisePropertyChanged("Server");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Database {
            get {
                return this.databaseField;
            }
            set {
                this.databaseField = value;
                this.RaisePropertyChanged("Database");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
                this.RaisePropertyChanged("Company");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public int CompanyId {
            get {
                return this.companyIdField;
            }
            set {
                this.companyIdField = value;
                this.RaisePropertyChanged("CompanyId");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public int LCID {
            get {
                return this.lCIDField;
            }
            set {
                this.lCIDField = value;
                this.RaisePropertyChanged("LCID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public bool IsFTSEnabled {
            get {
                return this.isFTSEnabledField;
            }
            set {
                this.isFTSEnabledField = value;
                this.RaisePropertyChanged("IsFTSEnabled");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public bool UseFTS {
            get {
                return this.useFTSField;
            }
            set {
                this.useFTSField = value;
                this.RaisePropertyChanged("UseFTS");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public bool IsAlreadyAnalyzed {
            get {
                return this.isAlreadyAnalyzedField;
            }
            set {
                this.isAlreadyAnalyzedField = value;
                this.RaisePropertyChanged("IsAlreadyAnalyzed");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string ExtensionTypeCollate {
            get {
                return this.extensionTypeCollateField;
            }
            set {
                this.extensionTypeCollateField = value;
                this.RaisePropertyChanged("ExtensionTypeCollate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public string FulltextDocumentTypesCollate {
            get {
                return this.fulltextDocumentTypesCollateField;
            }
            set {
                this.fulltextDocumentTypesCollateField = value;
                this.RaisePropertyChanged("FulltextDocumentTypesCollate");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public bool IsSOSActivated {
            get {
                return this.isSOSActivatedField;
            }
            set {
                this.isSOSActivatedField = value;
                this.RaisePropertyChanged("IsSOSActivated");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public System.DateTime LastSOSUpdateDateTime {
            get {
                return this.lastSOSUpdateDateTimeField;
            }
            set {
                this.lastSOSUpdateDateTimeField = value;
                this.RaisePropertyChanged("LastSOSUpdateDateTime");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public partial class ClientData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string cPUField;
        
        private string resolutionsField;
        
        private string ramTypeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string CPU {
            get {
                return this.cPUField;
            }
            set {
                this.cPUField = value;
                this.RaisePropertyChanged("CPU");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Resolutions {
            get {
                return this.resolutionsField;
            }
            set {
                this.resolutionsField = value;
                this.RaisePropertyChanged("Resolutions");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string RamType {
            get {
                return this.ramTypeField;
            }
            set {
                this.ramTypeField = value;
                this.RaisePropertyChanged("RamType");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public enum MessageSensation {
        
        /// <remarks/>
        Information,
        
        /// <remarks/>
        ResultGreen,
        
        /// <remarks/>
        Warning,
        
        /// <remarks/>
        Error,
        
        /// <remarks/>
        AccessDenied,
        
        /// <remarks/>
        Help,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SendErrorFile", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class SendErrorFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string LogFile;
        
        public SendErrorFileRequest() {
        }
        
        public SendErrorFileRequest(string LogFile) {
            this.LogFile = LogFile;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SendErrorFileResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class SendErrorFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public bool SendErrorFileResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string ErrorMessage;
        
        public SendErrorFileResponse() {
        }
        
        public SendErrorFileResponse(bool SendErrorFileResult, string ErrorMessage) {
            this.SendErrorFileResult = SendErrorFileResult;
            this.ErrorMessage = ErrorMessage;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadPdb", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class DownloadPdbRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string PdbFile;
        
        public DownloadPdbRequest() {
        }
        
        public DownloadPdbRequest(string PdbFile) {
            this.PdbFile = PdbFile;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadPdbResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class DownloadPdbResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public bool DownloadPdbResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string ErrorMessage;
        
        public DownloadPdbResponse() {
        }
        
        public DownloadPdbResponse(bool DownloadPdbResult, string ErrorMessage) {
            this.DownloadPdbResult = DownloadPdbResult;
            this.ErrorMessage = ErrorMessage;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsValidDate", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class IsValidDateRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string operationDate;
        
        public IsValidDateRequest() {
        }
        
        public IsValidDateRequest(string operationDate) {
            this.operationDate = operationDate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsValidDateResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class IsValidDateResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public bool IsValidDateResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string maxDate;
        
        public IsValidDateResponse() {
        }
        
        public IsValidDateResponse(bool IsValidDateResult, string maxDate) {
            this.IsValidDateResult = IsValidDateResult;
            this.maxDate = maxDate;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCalNumber", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetCalNumberRequest {
        
        public GetCalNumberRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCalNumberResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetCalNumberResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public int namedCal;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public int gdiConcurrent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public int unnamedCal;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public int officeCal;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=4)]
        public int tpCal;
        
        public GetCalNumberResponse() {
        }
        
        public GetCalNumberResponse(int namedCal, int gdiConcurrent, int unnamedCal, int officeCal, int tpCal) {
            this.namedCal = namedCal;
            this.gdiConcurrent = gdiConcurrent;
            this.unnamedCal = unnamedCal;
            this.officeCal = officeCal;
            this.tpCal = tpCal;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCalNumber2", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetCalNumber2Request {
        
        public GetCalNumber2Request() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCalNumber2Response", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetCalNumber2Response {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public int namedCal;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public int gdiConcurrent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public int unnamedCal;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public int officeCal;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=4)]
        public int tpCal;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=5)]
        public int wmsCal;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=6)]
        public int manufacturingCal;
        
        public GetCalNumber2Response() {
        }
        
        public GetCalNumber2Response(int namedCal, int gdiConcurrent, int unnamedCal, int officeCal, int tpCal, int wmsCal, int manufacturingCal) {
            this.namedCal = namedCal;
            this.gdiConcurrent = gdiConcurrent;
            this.unnamedCal = unnamedCal;
            this.officeCal = officeCal;
            this.tpCal = tpCal;
            this.wmsCal = wmsCal;
            this.manufacturingCal = manufacturingCal;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCalNumber3", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetCalNumber3Request {
        
        public GetCalNumber3Request() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCalNumber3Response", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetCalNumber3Response {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public int namedCal;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public int gdiConcurrent;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public int unnamedCal;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public int officeCal;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=4)]
        public int tpCal;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=5)]
        public int wmsCal;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=6)]
        public int manufacturingCal;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=7)]
        public int instoreCal;
        
        public GetCalNumber3Response() {
        }
        
        public GetCalNumber3Response(int namedCal, int gdiConcurrent, int unnamedCal, int officeCal, int tpCal, int wmsCal, int manufacturingCal, int instoreCal) {
            this.namedCal = namedCal;
            this.gdiConcurrent = gdiConcurrent;
            this.unnamedCal = unnamedCal;
            this.officeCal = officeCal;
            this.tpCal = tpCal;
            this.wmsCal = wmsCal;
            this.manufacturingCal = manufacturingCal;
            this.instoreCal = instoreCal;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateUser", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class ValidateUserRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public bool winNtAuthentication;
        
        public ValidateUserRequest() {
        }
        
        public ValidateUserRequest(string userName, string password, bool winNtAuthentication) {
            this.userName = userName;
            this.password = password;
            this.winNtAuthentication = winNtAuthentication;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ValidateUserResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class ValidateUserResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public int ValidateUserResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string[] userCompanies;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public int loginId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public bool userCannotChangePassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=4)]
        public bool userMustChangePassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=5)]
        public System.DateTime expiredDatePassword;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=6)]
        public bool passwordNeverExpired;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=7)]
        public bool expiredDateCannotChange;
        
        public ValidateUserResponse() {
        }
        
        public ValidateUserResponse(int ValidateUserResult, string[] userCompanies, int loginId, bool userCannotChangePassword, bool userMustChangePassword, System.DateTime expiredDatePassword, bool passwordNeverExpired, bool expiredDateCannotChange) {
            this.ValidateUserResult = ValidateUserResult;
            this.userCompanies = userCompanies;
            this.loginId = loginId;
            this.userCannotChangePassword = userCannotChangePassword;
            this.userMustChangePassword = userMustChangePassword;
            this.expiredDatePassword = expiredDatePassword;
            this.passwordNeverExpired = passwordNeverExpired;
            this.expiredDateCannotChange = expiredDateCannotChange;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LoginCompact", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class LoginCompactRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string companyName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public string password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public string askingProcess;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=4)]
        public bool overWriteLogin;
        
        public LoginCompactRequest() {
        }
        
        public LoginCompactRequest(string userName, string companyName, string password, string askingProcess, bool overWriteLogin) {
            this.userName = userName;
            this.companyName = companyName;
            this.password = password;
            this.askingProcess = askingProcess;
            this.overWriteLogin = overWriteLogin;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LoginCompactResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class LoginCompactResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public int LoginCompactResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public string companyName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public string authenticationToken;
        
        public LoginCompactResponse() {
        }
        
        public LoginCompactResponse(int LoginCompactResult, string userName, string companyName, string authenticationToken) {
            this.LoginCompactResult = LoginCompactResult;
            this.userName = userName;
            this.companyName = companyName;
            this.authenticationToken = authenticationToken;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LoginViaInfinityToken2", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class LoginViaInfinityToken2Request {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string cryptedToken;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string username;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public string password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public string company;
        
        public LoginViaInfinityToken2Request() {
        }
        
        public LoginViaInfinityToken2Request(string cryptedToken, string username, string password, string company) {
            this.cryptedToken = cryptedToken;
            this.username = username;
            this.password = password;
            this.company = company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LoginViaInfinityToken2Response", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class LoginViaInfinityToken2Response {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public int LoginViaInfinityToken2Result;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string authenticationToken;
        
        public LoginViaInfinityToken2Response() {
        }
        
        public LoginViaInfinityToken2Response(int LoginViaInfinityToken2Result, string authenticationToken) {
            this.LoginViaInfinityToken2Result = LoginViaInfinityToken2Result;
            this.authenticationToken = authenticationToken;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Login", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class LoginRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string companyName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public string password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public string askingProcess;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=4)]
        public bool overWriteLogin;
        
        public LoginRequest() {
        }
        
        public LoginRequest(string userName, string companyName, string password, string askingProcess, bool overWriteLogin) {
            this.userName = userName;
            this.companyName = companyName;
            this.password = password;
            this.askingProcess = askingProcess;
            this.overWriteLogin = overWriteLogin;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LoginResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class LoginResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public int LoginResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public string companyName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public bool admin;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=4)]
        public string authenticationToken;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=5)]
        public int companyId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=6)]
        public string dbName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=7)]
        public string dbServer;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=8)]
        public int providerId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=9)]
        public bool security;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=10)]
        public bool auditing;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=11)]
        public bool useKeyedUpdate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=12)]
        public bool transactionUse;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=13)]
        public string preferredLanguage;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=14)]
        public string applicationLanguage;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=15)]
        public string providerName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=16)]
        public string providerDescription;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=17)]
        public bool useConstParameter;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=18)]
        public bool stripTrailingSpaces;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=19)]
        public string providerCompanyConnectionString;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=20)]
        public string nonProviderCompanyConnectionString;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=21)]
        public string dbUser;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=22)]
        public string activationDB;
        
        public LoginResponse() {
        }
        
        public LoginResponse(
                    int LoginResult, 
                    string userName, 
                    string companyName, 
                    bool admin, 
                    string authenticationToken, 
                    int companyId, 
                    string dbName, 
                    string dbServer, 
                    int providerId, 
                    bool security, 
                    bool auditing, 
                    bool useKeyedUpdate, 
                    bool transactionUse, 
                    string preferredLanguage, 
                    string applicationLanguage, 
                    string providerName, 
                    string providerDescription, 
                    bool useConstParameter, 
                    bool stripTrailingSpaces, 
                    string providerCompanyConnectionString, 
                    string nonProviderCompanyConnectionString, 
                    string dbUser, 
                    string activationDB) {
            this.LoginResult = LoginResult;
            this.userName = userName;
            this.companyName = companyName;
            this.admin = admin;
            this.authenticationToken = authenticationToken;
            this.companyId = companyId;
            this.dbName = dbName;
            this.dbServer = dbServer;
            this.providerId = providerId;
            this.security = security;
            this.auditing = auditing;
            this.useKeyedUpdate = useKeyedUpdate;
            this.transactionUse = transactionUse;
            this.preferredLanguage = preferredLanguage;
            this.applicationLanguage = applicationLanguage;
            this.providerName = providerName;
            this.providerDescription = providerDescription;
            this.useConstParameter = useConstParameter;
            this.stripTrailingSpaces = stripTrailingSpaces;
            this.providerCompanyConnectionString = providerCompanyConnectionString;
            this.nonProviderCompanyConnectionString = nonProviderCompanyConnectionString;
            this.dbUser = dbUser;
            this.activationDB = activationDB;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Login2", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class Login2Request {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string companyName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public string password;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public string askingProcess;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=4)]
        public string macIp;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=5)]
        public bool overWriteLogin;
        
        public Login2Request() {
        }
        
        public Login2Request(string userName, string companyName, string password, string askingProcess, string macIp, bool overWriteLogin) {
            this.userName = userName;
            this.companyName = companyName;
            this.password = password;
            this.askingProcess = askingProcess;
            this.macIp = macIp;
            this.overWriteLogin = overWriteLogin;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Login2Response", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class Login2Response {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public int Login2Result;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public string companyName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public bool admin;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=4)]
        public string authenticationToken;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=5)]
        public int companyId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=6)]
        public string dbName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=7)]
        public string dbServer;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=8)]
        public int providerId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=9)]
        public bool security;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=10)]
        public bool auditing;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=11)]
        public bool useKeyedUpdate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=12)]
        public bool transactionUse;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=13)]
        public string preferredLanguage;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=14)]
        public string applicationLanguage;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=15)]
        public string providerName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=16)]
        public string providerDescription;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=17)]
        public bool useConstParameter;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=18)]
        public bool stripTrailingSpaces;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=19)]
        public string providerCompanyConnectionString;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=20)]
        public string nonProviderCompanyConnectionString;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=21)]
        public string dbUser;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=22)]
        public string activationDB;
        
        public Login2Response() {
        }
        
        public Login2Response(
                    int Login2Result, 
                    string userName, 
                    string companyName, 
                    bool admin, 
                    string authenticationToken, 
                    int companyId, 
                    string dbName, 
                    string dbServer, 
                    int providerId, 
                    bool security, 
                    bool auditing, 
                    bool useKeyedUpdate, 
                    bool transactionUse, 
                    string preferredLanguage, 
                    string applicationLanguage, 
                    string providerName, 
                    string providerDescription, 
                    bool useConstParameter, 
                    bool stripTrailingSpaces, 
                    string providerCompanyConnectionString, 
                    string nonProviderCompanyConnectionString, 
                    string dbUser, 
                    string activationDB) {
            this.Login2Result = Login2Result;
            this.userName = userName;
            this.companyName = companyName;
            this.admin = admin;
            this.authenticationToken = authenticationToken;
            this.companyId = companyId;
            this.dbName = dbName;
            this.dbServer = dbServer;
            this.providerId = providerId;
            this.security = security;
            this.auditing = auditing;
            this.useKeyedUpdate = useKeyedUpdate;
            this.transactionUse = transactionUse;
            this.preferredLanguage = preferredLanguage;
            this.applicationLanguage = applicationLanguage;
            this.providerName = providerName;
            this.providerDescription = providerDescription;
            this.useConstParameter = useConstParameter;
            this.stripTrailingSpaces = stripTrailingSpaces;
            this.providerCompanyConnectionString = providerCompanyConnectionString;
            this.nonProviderCompanyConnectionString = nonProviderCompanyConnectionString;
            this.dbUser = dbUser;
            this.activationDB = activationDB;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetLoginInformation", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetLoginInformationRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string authenticationToken;
        
        public GetLoginInformationRequest() {
        }
        
        public GetLoginInformationRequest(string authenticationToken) {
            this.authenticationToken = authenticationToken;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetLoginInformationResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetLoginInformationResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public bool GetLoginInformationResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public int loginId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public string companyName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=4)]
        public int companyId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=5)]
        public bool admin;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=6)]
        public string dbName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=7)]
        public string dbServer;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=8)]
        public int providerId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=9)]
        public bool security;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=10)]
        public bool auditing;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=11)]
        public bool useKeyedUpdate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=12)]
        public bool transactionUse;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=13)]
        public bool useUnicode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=14)]
        public string preferredLanguage;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=15)]
        public string applicationLanguage;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=16)]
        public string providerName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=17)]
        public string providerDescription;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=18)]
        public bool useConstParameter;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=19)]
        public bool stripTrailingSpaces;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=20)]
        public string providerCompanyConnectionString;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=21)]
        public string nonProviderCompanyConnectionString;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=22)]
        public string dbUser;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=23)]
        public string processName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=24)]
        public string userDescription;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=25)]
        public string email;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=26)]
        public bool easyBuilderDeveloper;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=27)]
        public bool rowSecurity;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=28)]
        public bool dataSynchro;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=29)]
        public bool cgm;
        
        public GetLoginInformationResponse() {
        }
        
        public GetLoginInformationResponse(
                    bool GetLoginInformationResult, 
                    string userName, 
                    int loginId, 
                    string companyName, 
                    int companyId, 
                    bool admin, 
                    string dbName, 
                    string dbServer, 
                    int providerId, 
                    bool security, 
                    bool auditing, 
                    bool useKeyedUpdate, 
                    bool transactionUse, 
                    bool useUnicode, 
                    string preferredLanguage, 
                    string applicationLanguage, 
                    string providerName, 
                    string providerDescription, 
                    bool useConstParameter, 
                    bool stripTrailingSpaces, 
                    string providerCompanyConnectionString, 
                    string nonProviderCompanyConnectionString, 
                    string dbUser, 
                    string processName, 
                    string userDescription, 
                    string email, 
                    bool easyBuilderDeveloper, 
                    bool rowSecurity, 
                    bool dataSynchro, 
                    bool cgm) {
            this.GetLoginInformationResult = GetLoginInformationResult;
            this.userName = userName;
            this.loginId = loginId;
            this.companyName = companyName;
            this.companyId = companyId;
            this.admin = admin;
            this.dbName = dbName;
            this.dbServer = dbServer;
            this.providerId = providerId;
            this.security = security;
            this.auditing = auditing;
            this.useKeyedUpdate = useKeyedUpdate;
            this.transactionUse = transactionUse;
            this.useUnicode = useUnicode;
            this.preferredLanguage = preferredLanguage;
            this.applicationLanguage = applicationLanguage;
            this.providerName = providerName;
            this.providerDescription = providerDescription;
            this.useConstParameter = useConstParameter;
            this.stripTrailingSpaces = stripTrailingSpaces;
            this.providerCompanyConnectionString = providerCompanyConnectionString;
            this.nonProviderCompanyConnectionString = nonProviderCompanyConnectionString;
            this.dbUser = dbUser;
            this.processName = processName;
            this.userDescription = userDescription;
            this.email = email;
            this.easyBuilderDeveloper = easyBuilderDeveloper;
            this.rowSecurity = rowSecurity;
            this.dataSynchro = dataSynchro;
            this.cgm = cgm;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsFloatingUser", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class IsFloatingUserRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string loginName;
        
        public IsFloatingUserRequest() {
        }
        
        public IsFloatingUserRequest(string loginName) {
            this.loginName = loginName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsFloatingUserResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class IsFloatingUserResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public bool IsFloatingUserResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public bool floating;
        
        public IsFloatingUserResponse() {
        }
        
        public IsFloatingUserResponse(bool IsFloatingUserResult, bool floating) {
            this.IsFloatingUserResult = IsFloatingUserResult;
            this.floating = floating;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsWebUser", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class IsWebUserRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string loginName;
        
        public IsWebUserRequest() {
        }
        
        public IsWebUserRequest(string loginName) {
            this.loginName = loginName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="IsWebUserResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class IsWebUserResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public bool IsWebUserResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public bool web;
        
        public IsWebUserResponse() {
        }
        
        public IsWebUserResponse(bool IsWebUserResult, bool web) {
            this.IsWebUserResult = IsWebUserResult;
            this.web = web;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAuthenticationInformations", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetAuthenticationInformationsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string authenticationToken;
        
        public GetAuthenticationInformationsRequest() {
        }
        
        public GetAuthenticationInformationsRequest(string authenticationToken) {
            this.authenticationToken = authenticationToken;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAuthenticationInformationsResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetAuthenticationInformationsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public bool GetAuthenticationInformationsResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public int loginId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public int companyId;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public bool webLogin;
        
        public GetAuthenticationInformationsResponse() {
        }
        
        public GetAuthenticationInformationsResponse(bool GetAuthenticationInformationsResult, int loginId, int companyId, bool webLogin) {
            this.GetAuthenticationInformationsResult = GetAuthenticationInformationsResult;
            this.loginId = loginId;
            this.companyId = companyId;
            this.webLogin = webLogin;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAuthenticationNames", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetAuthenticationNamesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string authenticationToken;
        
        public GetAuthenticationNamesRequest() {
        }
        
        public GetAuthenticationNamesRequest(string authenticationToken) {
            this.authenticationToken = authenticationToken;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetAuthenticationNamesResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetAuthenticationNamesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public bool GetAuthenticationNamesResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public string companyName;
        
        public GetAuthenticationNamesResponse() {
        }
        
        public GetAuthenticationNamesResponse(bool GetAuthenticationNamesResult, string userName, string companyName) {
            this.GetAuthenticationNamesResult = GetAuthenticationNamesResult;
            this.userName = userName;
            this.companyName = companyName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetDefaultSchema", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class SetDefaultSchemaRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string authenticationToken;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string company;
        
        public SetDefaultSchemaRequest() {
        }
        
        public SetDefaultSchemaRequest(string authenticationToken, string company) {
            this.authenticationToken = authenticationToken;
            this.company = company;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetDefaultSchemaResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class SetDefaultSchemaResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public bool SetDefaultSchemaResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string d;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public string c;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public int p;
        
        public SetDefaultSchemaResponse() {
        }
        
        public SetDefaultSchemaResponse(bool SetDefaultSchemaResult, string d, string c, int p) {
            this.SetDefaultSchemaResult = SetDefaultSchemaResult;
            this.d = d;
            this.c = c;
            this.p = p;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetConfigurationStream", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetConfigurationStreamRequest {
        
        public GetConfigurationStreamRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetConfigurationStreamResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetConfigurationStreamResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetConfigurationStreamResult;
        
        public GetConfigurationStreamResponse() {
        }
        
        public GetConfigurationStreamResponse(byte[] GetConfigurationStreamResult) {
            this.GetConfigurationStreamResult = GetConfigurationStreamResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetInstallationVersion", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetInstallationVersionRequest {
        
        public GetInstallationVersionRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetInstallationVersionResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetInstallationVersionResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public string GetInstallationVersionResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string productName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public System.DateTime buildDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=3)]
        public System.DateTime instDate;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=4)]
        public int build;
        
        public GetInstallationVersionResponse() {
        }
        
        public GetInstallationVersionResponse(string GetInstallationVersionResult, string productName, System.DateTime buildDate, System.DateTime instDate, int build) {
            this.GetInstallationVersionResult = GetInstallationVersionResult;
            this.productName = productName;
            this.buildDate = buildDate;
            this.instDate = instDate;
            this.build = build;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public enum DBNetworkType {
        
        /// <remarks/>
        Undefined,
        
        /// <remarks/>
        Large,
        
        /// <remarks/>
        Small,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public enum GrantType {
        
        /// <remarks/>
        Execute,
        
        /// <remarks/>
        Edit,
        
        /// <remarks/>
        New,
        
        /// <remarks/>
        Delete,
        
        /// <remarks/>
        Browse,
        
        /// <remarks/>
        CustomizeForm,
        
        /// <remarks/>
        EditQuery,
        
        /// <remarks/>
        Import,
        
        /// <remarks/>
        Export,
        
        /// <remarks/>
        SilentMode,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public enum SerialNumberType {
        
        /// <remarks/>
        Normal,
        
        /// <remarks/>
        Development,
        
        /// <remarks/>
        Reseller,
        
        /// <remarks/>
        Distributor,
        
        /// <remarks/>
        Demo,
        
        /// <remarks/>
        DevelopmentIU,
        
        /// <remarks/>
        Multi,
        
        /// <remarks/>
        StandAlone,
        
        /// <remarks/>
        Backup,
        
        /// <remarks/>
        Test,
        
        /// <remarks/>
        PersonalPlusK,
        
        /// <remarks/>
        DevelopmentPlusK,
        
        /// <remarks/>
        DevelopmentPlusUser,
        
        /// <remarks/>
        PersonalPlusUser,
        
        /// <remarks/>
        UNDEFINED,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public enum ActivationState {
        
        /// <remarks/>
        Demo,
        
        /// <remarks/>
        DemoWarning,
        
        /// <remarks/>
        SilentWarning,
        
        /// <remarks/>
        Warning,
        
        /// <remarks/>
        Activated,
        
        /// <remarks/>
        NoActivated,
        
        /// <remarks/>
        Disabled,
        
        /// <remarks/>
        Undefined,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetCurrentComponents", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class SetCurrentComponentsRequest {
        
        public SetCurrentComponentsRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SetCurrentComponentsResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class SetCurrentComponentsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public PurchaseDocJE_AP_AR.MagoLoginManager.ActivationState SetCurrentComponentsResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public int dte;
        
        public SetCurrentComponentsResponse() {
        }
        
        public SetCurrentComponentsResponse(PurchaseDocJE_AP_AR.MagoLoginManager.ActivationState SetCurrentComponentsResult, int dte) {
            this.SetCurrentComponentsResult = SetCurrentComponentsResult;
            this.dte = dte;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCompanyLanguage", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetCompanyLanguageRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public int companyID;
        
        public GetCompanyLanguageRequest() {
        }
        
        public GetCompanyLanguageRequest(int companyID) {
            this.companyID = companyID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCompanyLanguageResponse", WrapperNamespace="http://microarea.it/LoginManager/", IsWrapped=true)]
    public partial class GetCompanyLanguageResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=0)]
        public bool GetCompanyLanguageResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=1)]
        public string cultureUI;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://microarea.it/LoginManager/", Order=2)]
        public string culture;
        
        public GetCompanyLanguageResponse() {
        }
        
        public GetCompanyLanguageResponse(bool GetCompanyLanguageResult, string cultureUI, string culture) {
            this.GetCompanyLanguageResult = GetCompanyLanguageResult;
            this.cultureUI = cultureUI;
            this.culture = culture;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://microarea.it/LoginManager/")]
    public enum LoginSlotType {
        
        /// <remarks/>
        Invalid,
        
        /// <remarks/>
        Gdi,
        
        /// <remarks/>
        MagicDocument,
        
        /// <remarks/>
        EasyLook,
        
        /// <remarks/>
        ThirdPart,
        
        /// <remarks/>
        Mobile,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface MicroareaLoginManagerSoapChannel : PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MicroareaLoginManagerSoapClient : System.ServiceModel.ClientBase<PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap>, PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap {
        
        public MicroareaLoginManagerSoapClient() {
        }
        
        public MicroareaLoginManagerSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MicroareaLoginManagerSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MicroareaLoginManagerSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MicroareaLoginManagerSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SetMessageRead(string userName, string messageID) {
            base.Channel.SetMessageRead(userName, messageID);
        }
        
        public System.Threading.Tasks.Task SetMessageReadAsync(string userName, string messageID) {
            return base.Channel.SetMessageReadAsync(userName, messageID);
        }
        
        public PurchaseDocJE_AP_AR.MagoLoginManager.Advertisement[] GetImmediateMessagesQueue(string authenticationToken) {
            return base.Channel.GetImmediateMessagesQueue(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.Advertisement[]> GetImmediateMessagesQueueAsync(string authenticationToken) {
            return base.Channel.GetImmediateMessagesQueueAsync(authenticationToken);
        }
        
        public PurchaseDocJE_AP_AR.MagoLoginManager.Advertisement[] GetMessagesQueue(string authenticationToken) {
            return base.Channel.GetMessagesQueue(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.Advertisement[]> GetMessagesQueueAsync(string authenticationToken) {
            return base.Channel.GetMessagesQueueAsync(authenticationToken);
        }
        
        public PurchaseDocJE_AP_AR.MagoLoginManager.Advertisement[] GetOldMessages(string authenticationToken) {
            return base.Channel.GetOldMessages(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.Advertisement[]> GetOldMessagesAsync(string authenticationToken) {
            return base.Channel.GetOldMessagesAsync(authenticationToken);
        }
        
        public void DeleteMessageFromQueue(string messageID) {
            base.Channel.DeleteMessageFromQueue(messageID);
        }
        
        public System.Threading.Tasks.Task DeleteMessageFromQueueAsync(string messageID) {
            return base.Channel.DeleteMessageFromQueueAsync(messageID);
        }
        
        public void PurgeMessageByTag(string tag, string user) {
            base.Channel.PurgeMessageByTag(tag, user);
        }
        
        public System.Threading.Tasks.Task PurgeMessageByTagAsync(string tag, string user) {
            return base.Channel.PurgeMessageByTagAsync(tag, user);
        }
        
        public bool SendAccessMail() {
            return base.Channel.SendAccessMail();
        }
        
        public System.Threading.Tasks.Task<bool> SendAccessMailAsync() {
            return base.Channel.SendAccessMailAsync();
        }
        
        public string GetAspNetUser() {
            return base.Channel.GetAspNetUser();
        }
        
        public System.Threading.Tasks.Task<string> GetAspNetUserAsync() {
            return base.Channel.GetAspNetUserAsync();
        }
        
        public string GetConfigurationHash() {
            return base.Channel.GetConfigurationHash();
        }
        
        public System.Threading.Tasks.Task<string> GetConfigurationHashAsync() {
            return base.Channel.GetConfigurationHashAsync();
        }
        
        public bool UserCanAccessWebSitePrivateArea(int loginId) {
            return base.Channel.UserCanAccessWebSitePrivateArea(loginId);
        }
        
        public System.Threading.Tasks.Task<bool> UserCanAccessWebSitePrivateAreaAsync(int loginId) {
            return base.Channel.UserCanAccessWebSitePrivateAreaAsync(loginId);
        }
        
        public bool IsEasyBuilderDeveloper(string authenticationToken) {
            return base.Channel.IsEasyBuilderDeveloper(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<bool> IsEasyBuilderDeveloperAsync(string authenticationToken) {
            return base.Channel.IsEasyBuilderDeveloperAsync(authenticationToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PurchaseDocJE_AP_AR.MagoLoginManager.SendErrorFileResponse PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap.SendErrorFile(PurchaseDocJE_AP_AR.MagoLoginManager.SendErrorFileRequest request) {
            return base.Channel.SendErrorFile(request);
        }
        
        public bool SendErrorFile(string LogFile, out string ErrorMessage) {
            PurchaseDocJE_AP_AR.MagoLoginManager.SendErrorFileRequest inValue = new PurchaseDocJE_AP_AR.MagoLoginManager.SendErrorFileRequest();
            inValue.LogFile = LogFile;
            PurchaseDocJE_AP_AR.MagoLoginManager.SendErrorFileResponse retVal = ((PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap)(this)).SendErrorFile(inValue);
            ErrorMessage = retVal.ErrorMessage;
            return retVal.SendErrorFileResult;
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.SendErrorFileResponse> SendErrorFileAsync(PurchaseDocJE_AP_AR.MagoLoginManager.SendErrorFileRequest request) {
            return base.Channel.SendErrorFileAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PurchaseDocJE_AP_AR.MagoLoginManager.DownloadPdbResponse PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap.DownloadPdb(PurchaseDocJE_AP_AR.MagoLoginManager.DownloadPdbRequest request) {
            return base.Channel.DownloadPdb(request);
        }
        
        public bool DownloadPdb(string PdbFile, out string ErrorMessage) {
            PurchaseDocJE_AP_AR.MagoLoginManager.DownloadPdbRequest inValue = new PurchaseDocJE_AP_AR.MagoLoginManager.DownloadPdbRequest();
            inValue.PdbFile = PdbFile;
            PurchaseDocJE_AP_AR.MagoLoginManager.DownloadPdbResponse retVal = ((PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap)(this)).DownloadPdb(inValue);
            ErrorMessage = retVal.ErrorMessage;
            return retVal.DownloadPdbResult;
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.DownloadPdbResponse> DownloadPdbAsync(PurchaseDocJE_AP_AR.MagoLoginManager.DownloadPdbRequest request) {
            return base.Channel.DownloadPdbAsync(request);
        }
        
        public string GetMainSerialNumber() {
            return base.Channel.GetMainSerialNumber();
        }
        
        public System.Threading.Tasks.Task<string> GetMainSerialNumberAsync() {
            return base.Channel.GetMainSerialNumberAsync();
        }
        
        public string GetServiceJson() {
            return base.Channel.GetServiceJson();
        }
        
        public System.Threading.Tasks.Task<string> GetServiceJsonAsync() {
            return base.Channel.GetServiceJsonAsync();
        }
        
        public string GetMLUExpiryDate() {
            return base.Channel.GetMLUExpiryDate();
        }
        
        public System.Threading.Tasks.Task<string> GetMLUExpiryDateAsync() {
            return base.Channel.GetMLUExpiryDateAsync();
        }
        
        public void SendBalloon(string authenticationToken, string bodyMessage, PurchaseDocJE_AP_AR.MagoLoginManager.MessageType messageType, string[] recipients) {
            base.Channel.SendBalloon(authenticationToken, bodyMessage, messageType, recipients);
        }
        
        public System.Threading.Tasks.Task SendBalloonAsync(string authenticationToken, string bodyMessage, PurchaseDocJE_AP_AR.MagoLoginManager.MessageType messageType, string[] recipients) {
            return base.Channel.SendBalloonAsync(authenticationToken, bodyMessage, messageType, recipients);
        }
        
        public void AdvancedSendBalloon(string authenticationToken, string bodyMessage, System.DateTime expiryDate, int messageType, string[] recipients, int sensation, bool historicize, bool immediate, int timer) {
            base.Channel.AdvancedSendBalloon(authenticationToken, bodyMessage, expiryDate, messageType, recipients, sensation, historicize, immediate, timer);
        }
        
        public System.Threading.Tasks.Task AdvancedSendBalloonAsync(string authenticationToken, string bodyMessage, System.DateTime expiryDate, int messageType, string[] recipients, int sensation, bool historicize, bool immediate, int timer) {
            return base.Channel.AdvancedSendBalloonAsync(authenticationToken, bodyMessage, expiryDate, messageType, recipients, sensation, historicize, immediate, timer);
        }
        
        public void AdvancedSendTaggedBalloon(string authenticationToken, string bodyMessage, System.DateTime expiryDate, int messageType, string[] recipients, int sensation, bool historicize, bool immediate, int timer, string tag) {
            base.Channel.AdvancedSendTaggedBalloon(authenticationToken, bodyMessage, expiryDate, messageType, recipients, sensation, historicize, immediate, timer, tag);
        }
        
        public System.Threading.Tasks.Task AdvancedSendTaggedBalloonAsync(string authenticationToken, string bodyMessage, System.DateTime expiryDate, int messageType, string[] recipients, int sensation, bool historicize, bool immediate, int timer, string tag) {
            return base.Channel.AdvancedSendTaggedBalloonAsync(authenticationToken, bodyMessage, expiryDate, messageType, recipients, sensation, historicize, immediate, timer, tag);
        }
        
        public bool SetChannelFree(string authenticationToken, string[] channelCode) {
            return base.Channel.SetChannelFree(authenticationToken, channelCode);
        }
        
        public System.Threading.Tasks.Task<bool> SetChannelFreeAsync(string authenticationToken, string[] channelCode) {
            return base.Channel.SetChannelFreeAsync(authenticationToken, channelCode);
        }
        
        public bool GetChannelFree() {
            return base.Channel.GetChannelFree();
        }
        
        public System.Threading.Tasks.Task<bool> GetChannelFreeAsync() {
            return base.Channel.GetChannelFreeAsync();
        }
        
        public int M4PKStatus(string id, string key) {
            return base.Channel.M4PKStatus(id, key);
        }
        
        public System.Threading.Tasks.Task<int> M4PKStatusAsync(string id, string key) {
            return base.Channel.M4PKStatusAsync(id, key);
        }
        
        public string GetEditionType() {
            return base.Channel.GetEditionType();
        }
        
        public System.Threading.Tasks.Task<string> GetEditionTypeAsync() {
            return base.Channel.GetEditionTypeAsync();
        }
        
        public string[] GetTokensByProcessName(string processName) {
            return base.Channel.GetTokensByProcessName(processName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetTokensByProcessNameAsync(string processName) {
            return base.Channel.GetTokensByProcessNameAsync(processName);
        }
        
        public int Init(bool reboot, string authenticationToken) {
            return base.Channel.Init(reboot, authenticationToken);
        }
        
        public System.Threading.Tasks.Task<int> InitAsync(bool reboot, string authenticationToken) {
            return base.Channel.InitAsync(reboot, authenticationToken);
        }
        
        public bool IsAlive() {
            return base.Channel.IsAlive();
        }
        
        public System.Threading.Tasks.Task<bool> IsAliveAsync() {
            return base.Channel.IsAliveAsync();
        }
        
        public string Test(string valore) {
            return base.Channel.Test(valore);
        }
        
        public System.Threading.Tasks.Task<string> TestAsync(string valore) {
            return base.Channel.TestAsync(valore);
        }
        
        public bool VerifyDBSize() {
            return base.Channel.VerifyDBSize();
        }
        
        public System.Threading.Tasks.Task<bool> VerifyDBSizeAsync() {
            return base.Channel.VerifyDBSizeAsync();
        }
        
        public string GetMobileToken(string token, int loginType) {
            return base.Channel.GetMobileToken(token, loginType);
        }
        
        public System.Threading.Tasks.Task<string> GetMobileTokenAsync(string token, int loginType) {
            return base.Channel.GetMobileTokenAsync(token, loginType);
        }
        
        public bool RefreshWMSSlot(string authenticationToken) {
            return base.Channel.RefreshWMSSlot(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<bool> RefreshWMSSlotAsync(string authenticationToken) {
            return base.Channel.RefreshWMSSlotAsync(authenticationToken);
        }
        
        public bool IsCalAvailable(string authenticationToken, string application, string functionality) {
            return base.Channel.IsCalAvailable(authenticationToken, application, functionality);
        }
        
        public System.Threading.Tasks.Task<bool> IsCalAvailableAsync(string authenticationToken, string application, string functionality) {
            return base.Channel.IsCalAvailableAsync(authenticationToken, application, functionality);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PurchaseDocJE_AP_AR.MagoLoginManager.IsValidDateResponse PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap.IsValidDate(PurchaseDocJE_AP_AR.MagoLoginManager.IsValidDateRequest request) {
            return base.Channel.IsValidDate(request);
        }
        
        public bool IsValidDate(string operationDate, out string maxDate) {
            PurchaseDocJE_AP_AR.MagoLoginManager.IsValidDateRequest inValue = new PurchaseDocJE_AP_AR.MagoLoginManager.IsValidDateRequest();
            inValue.operationDate = operationDate;
            PurchaseDocJE_AP_AR.MagoLoginManager.IsValidDateResponse retVal = ((PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap)(this)).IsValidDate(inValue);
            maxDate = retVal.maxDate;
            return retVal.IsValidDateResult;
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.IsValidDateResponse> IsValidDateAsync(PurchaseDocJE_AP_AR.MagoLoginManager.IsValidDateRequest request) {
            return base.Channel.IsValidDateAsync(request);
        }
        
        public bool PingNeeded(bool force) {
            return base.Channel.PingNeeded(force);
        }
        
        public System.Threading.Tasks.Task<bool> PingNeededAsync(bool force) {
            return base.Channel.PingNeededAsync(force);
        }
        
        public void SetClientData(PurchaseDocJE_AP_AR.MagoLoginManager.ClientData cd) {
            base.Channel.SetClientData(cd);
        }
        
        public System.Threading.Tasks.Task SetClientDataAsync(PurchaseDocJE_AP_AR.MagoLoginManager.ClientData cd) {
            return base.Channel.SetClientDataAsync(cd);
        }
        
        public bool SetCompanyInfo(string authToken, string aName, string aValue) {
            return base.Channel.SetCompanyInfo(authToken, aName, aValue);
        }
        
        public System.Threading.Tasks.Task<bool> SetCompanyInfoAsync(string authToken, string aName, string aValue) {
            return base.Channel.SetCompanyInfoAsync(authToken, aName, aValue);
        }
        
        public bool IsActivated(string application, string functionality) {
            return base.Channel.IsActivated(application, functionality);
        }
        
        public System.Threading.Tasks.Task<bool> IsActivatedAsync(string application, string functionality) {
            return base.Channel.IsActivatedAsync(application, functionality);
        }
        
        public bool IsSynchActivation() {
            return base.Channel.IsSynchActivation();
        }
        
        public System.Threading.Tasks.Task<bool> IsSynchActivationAsync() {
            return base.Channel.IsSynchActivationAsync();
        }
        
        public string[] GetModules() {
            return base.Channel.GetModules();
        }
        
        public System.Threading.Tasks.Task<string[]> GetModulesAsync() {
            return base.Channel.GetModulesAsync();
        }
        
        public string[] GetCompanyUsers(string companyName) {
            return base.Channel.GetCompanyUsers(companyName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetCompanyUsersAsync(string companyName) {
            return base.Channel.GetCompanyUsersAsync(companyName);
        }
        
        public string[] GetNonNTCompanyUsers(string companyName) {
            return base.Channel.GetNonNTCompanyUsers(companyName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetNonNTCompanyUsersAsync(string companyName) {
            return base.Channel.GetNonNTCompanyUsersAsync(companyName);
        }
        
        public string[] GetCompanyRoles(string companyName) {
            return base.Channel.GetCompanyRoles(companyName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetCompanyRolesAsync(string companyName) {
            return base.Channel.GetCompanyRolesAsync(companyName);
        }
        
        public bool IsESPLogin(string authenticationToken) {
            return base.Channel.IsESPLogin(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<bool> IsESPLoginAsync(string authenticationToken) {
            return base.Channel.IsESPLoginAsync(authenticationToken);
        }
        
        public bool IsServiceAccess(string authenticationToken) {
            return base.Channel.IsServiceAccess(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<bool> IsServiceAccessAsync(string authenticationToken) {
            return base.Channel.IsServiceAccessAsync(authenticationToken);
        }
        
        public bool HasUserEBRoles(int companyName, int userName) {
            return base.Channel.HasUserEBRoles(companyName, userName);
        }
        
        public System.Threading.Tasks.Task<bool> HasUserEBRolesAsync(int companyName, int userName) {
            return base.Channel.HasUserEBRolesAsync(companyName, userName);
        }
        
        public string[] GetUserRoles(string companyName, string userName) {
            return base.Channel.GetUserRoles(companyName, userName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetUserRolesAsync(string companyName, string userName) {
            return base.Channel.GetUserRolesAsync(companyName, userName);
        }
        
        public string[] EnumAllUsers() {
            return base.Channel.EnumAllUsers();
        }
        
        public System.Threading.Tasks.Task<string[]> EnumAllUsersAsync() {
            return base.Channel.EnumAllUsersAsync();
        }
        
        public string[] EnumAllCompanyUsers(int companyId, bool onlyNonNTUsers) {
            return base.Channel.EnumAllCompanyUsers(companyId, onlyNonNTUsers);
        }
        
        public System.Threading.Tasks.Task<string[]> EnumAllCompanyUsersAsync(int companyId, bool onlyNonNTUsers) {
            return base.Channel.EnumAllCompanyUsersAsync(companyId, onlyNonNTUsers);
        }
        
        public string[] GetRoleUsers(string companyName, string roleName) {
            return base.Channel.GetRoleUsers(companyName, roleName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetRoleUsersAsync(string companyName, string roleName) {
            return base.Channel.GetRoleUsersAsync(companyName, roleName);
        }
        
        public string[] EnumCompanies(string userName) {
            return base.Channel.EnumCompanies(userName);
        }
        
        public System.Threading.Tasks.Task<string[]> EnumCompaniesAsync(string userName) {
            return base.Channel.EnumCompaniesAsync(userName);
        }
        
        public bool IsIntegratedSecurityUser(string userName) {
            return base.Channel.IsIntegratedSecurityUser(userName);
        }
        
        public System.Threading.Tasks.Task<bool> IsIntegratedSecurityUserAsync(string userName) {
            return base.Channel.IsIntegratedSecurityUserAsync(userName);
        }
        
        public int GetLoggedUsersNumber() {
            return base.Channel.GetLoggedUsersNumber();
        }
        
        public System.Threading.Tasks.Task<int> GetLoggedUsersNumberAsync() {
            return base.Channel.GetLoggedUsersNumberAsync();
        }
        
        public int GetCompanyLoggedUsersNumber(int companyId) {
            return base.Channel.GetCompanyLoggedUsersNumber(companyId);
        }
        
        public System.Threading.Tasks.Task<int> GetCompanyLoggedUsersNumberAsync(int companyId) {
            return base.Channel.GetCompanyLoggedUsersNumberAsync(companyId);
        }
        
        public string GetLoggedUsers() {
            return base.Channel.GetLoggedUsers();
        }
        
        public System.Threading.Tasks.Task<string> GetLoggedUsersAsync() {
            return base.Channel.GetLoggedUsersAsync();
        }
        
        public string GetLoggedUsersAdvanced(string token) {
            return base.Channel.GetLoggedUsersAdvanced(token);
        }
        
        public System.Threading.Tasks.Task<string> GetLoggedUsersAdvancedAsync(string token) {
            return base.Channel.GetLoggedUsersAdvancedAsync(token);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumberResponse PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap.GetCalNumber(PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumberRequest request) {
            return base.Channel.GetCalNumber(request);
        }
        
        public int GetCalNumber(out int gdiConcurrent, out int unnamedCal, out int officeCal, out int tpCal) {
            PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumberRequest inValue = new PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumberRequest();
            PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumberResponse retVal = ((PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap)(this)).GetCalNumber(inValue);
            gdiConcurrent = retVal.gdiConcurrent;
            unnamedCal = retVal.unnamedCal;
            officeCal = retVal.officeCal;
            tpCal = retVal.tpCal;
            return retVal.namedCal;
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumberResponse> GetCalNumberAsync(PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumberRequest request) {
            return base.Channel.GetCalNumberAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumber2Response PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap.GetCalNumber2(PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumber2Request request) {
            return base.Channel.GetCalNumber2(request);
        }
        
        public int GetCalNumber2(out int gdiConcurrent, out int unnamedCal, out int officeCal, out int tpCal, out int wmsCal, out int manufacturingCal) {
            PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumber2Request inValue = new PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumber2Request();
            PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumber2Response retVal = ((PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap)(this)).GetCalNumber2(inValue);
            gdiConcurrent = retVal.gdiConcurrent;
            unnamedCal = retVal.unnamedCal;
            officeCal = retVal.officeCal;
            tpCal = retVal.tpCal;
            wmsCal = retVal.wmsCal;
            manufacturingCal = retVal.manufacturingCal;
            return retVal.namedCal;
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumber2Response> GetCalNumber2Async(PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumber2Request request) {
            return base.Channel.GetCalNumber2Async(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumber3Response PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap.GetCalNumber3(PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumber3Request request) {
            return base.Channel.GetCalNumber3(request);
        }
        
        public int GetCalNumber3(out int gdiConcurrent, out int unnamedCal, out int officeCal, out int tpCal, out int wmsCal, out int manufacturingCal, out int instoreCal) {
            PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumber3Request inValue = new PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumber3Request();
            PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumber3Response retVal = ((PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap)(this)).GetCalNumber3(inValue);
            gdiConcurrent = retVal.gdiConcurrent;
            unnamedCal = retVal.unnamedCal;
            officeCal = retVal.officeCal;
            tpCal = retVal.tpCal;
            wmsCal = retVal.wmsCal;
            manufacturingCal = retVal.manufacturingCal;
            instoreCal = retVal.instoreCal;
            return retVal.namedCal;
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumber3Response> GetCalNumber3Async(PurchaseDocJE_AP_AR.MagoLoginManager.GetCalNumber3Request request) {
            return base.Channel.GetCalNumber3Async(request);
        }
        
        public int GetTokenProcessType(string token) {
            return base.Channel.GetTokenProcessType(token);
        }
        
        public System.Threading.Tasks.Task<int> GetTokenProcessTypeAsync(string token) {
            return base.Channel.GetTokenProcessTypeAsync(token);
        }
        
        public void ReloadConfiguration() {
            base.Channel.ReloadConfiguration();
        }
        
        public System.Threading.Tasks.Task ReloadConfigurationAsync() {
            return base.Channel.ReloadConfigurationAsync();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PurchaseDocJE_AP_AR.MagoLoginManager.ValidateUserResponse PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap.ValidateUser(PurchaseDocJE_AP_AR.MagoLoginManager.ValidateUserRequest request) {
            return base.Channel.ValidateUser(request);
        }
        
        public int ValidateUser(string userName, string password, bool winNtAuthentication, out string[] userCompanies, out int loginId, out bool userCannotChangePassword, out bool userMustChangePassword, out System.DateTime expiredDatePassword, out bool passwordNeverExpired, out bool expiredDateCannotChange) {
            PurchaseDocJE_AP_AR.MagoLoginManager.ValidateUserRequest inValue = new PurchaseDocJE_AP_AR.MagoLoginManager.ValidateUserRequest();
            inValue.userName = userName;
            inValue.password = password;
            inValue.winNtAuthentication = winNtAuthentication;
            PurchaseDocJE_AP_AR.MagoLoginManager.ValidateUserResponse retVal = ((PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap)(this)).ValidateUser(inValue);
            userCompanies = retVal.userCompanies;
            loginId = retVal.loginId;
            userCannotChangePassword = retVal.userCannotChangePassword;
            userMustChangePassword = retVal.userMustChangePassword;
            expiredDatePassword = retVal.expiredDatePassword;
            passwordNeverExpired = retVal.passwordNeverExpired;
            expiredDateCannotChange = retVal.expiredDateCannotChange;
            return retVal.ValidateUserResult;
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.ValidateUserResponse> ValidateUserAsync(PurchaseDocJE_AP_AR.MagoLoginManager.ValidateUserRequest request) {
            return base.Channel.ValidateUserAsync(request);
        }
        
        public int ConsumeMobileCal(string authenticationToken) {
            return base.Channel.ConsumeMobileCal(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<int> ConsumeMobileCalAsync(string authenticationToken) {
            return base.Channel.ConsumeMobileCalAsync(authenticationToken);
        }
        
        public int ConsumeInStoreCal(string authenticationToken) {
            return base.Channel.ConsumeInStoreCal(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<int> ConsumeInStoreCalAsync(string authenticationToken) {
            return base.Channel.ConsumeInStoreCalAsync(authenticationToken);
        }
        
        public int ChangePassword(string userName, string oldPassword, string newPassword) {
            return base.Channel.ChangePassword(userName, oldPassword, newPassword);
        }
        
        public System.Threading.Tasks.Task<int> ChangePasswordAsync(string userName, string oldPassword, string newPassword) {
            return base.Channel.ChangePasswordAsync(userName, oldPassword, newPassword);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PurchaseDocJE_AP_AR.MagoLoginManager.LoginCompactResponse PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap.LoginCompact(PurchaseDocJE_AP_AR.MagoLoginManager.LoginCompactRequest request) {
            return base.Channel.LoginCompact(request);
        }
        
        public int LoginCompact(ref string userName, ref string companyName, string password, string askingProcess, bool overWriteLogin, out string authenticationToken) {
            PurchaseDocJE_AP_AR.MagoLoginManager.LoginCompactRequest inValue = new PurchaseDocJE_AP_AR.MagoLoginManager.LoginCompactRequest();
            inValue.userName = userName;
            inValue.companyName = companyName;
            inValue.password = password;
            inValue.askingProcess = askingProcess;
            inValue.overWriteLogin = overWriteLogin;
            PurchaseDocJE_AP_AR.MagoLoginManager.LoginCompactResponse retVal = ((PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap)(this)).LoginCompact(inValue);
            userName = retVal.userName;
            companyName = retVal.companyName;
            authenticationToken = retVal.authenticationToken;
            return retVal.LoginCompactResult;
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.LoginCompactResponse> LoginCompactAsync(PurchaseDocJE_AP_AR.MagoLoginManager.LoginCompactRequest request) {
            return base.Channel.LoginCompactAsync(request);
        }
        
        public void SSOLogOff(string cryptedToken) {
            base.Channel.SSOLogOff(cryptedToken);
        }
        
        public System.Threading.Tasks.Task SSOLogOffAsync(string cryptedToken) {
            return base.Channel.SSOLogOffAsync(cryptedToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PurchaseDocJE_AP_AR.MagoLoginManager.LoginViaInfinityToken2Response PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap.LoginViaInfinityToken2(PurchaseDocJE_AP_AR.MagoLoginManager.LoginViaInfinityToken2Request request) {
            return base.Channel.LoginViaInfinityToken2(request);
        }
        
        public int LoginViaInfinityToken2(string cryptedToken, string username, string password, string company, out string authenticationToken) {
            PurchaseDocJE_AP_AR.MagoLoginManager.LoginViaInfinityToken2Request inValue = new PurchaseDocJE_AP_AR.MagoLoginManager.LoginViaInfinityToken2Request();
            inValue.cryptedToken = cryptedToken;
            inValue.username = username;
            inValue.password = password;
            inValue.company = company;
            PurchaseDocJE_AP_AR.MagoLoginManager.LoginViaInfinityToken2Response retVal = ((PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap)(this)).LoginViaInfinityToken2(inValue);
            authenticationToken = retVal.authenticationToken;
            return retVal.LoginViaInfinityToken2Result;
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.LoginViaInfinityToken2Response> LoginViaInfinityToken2Async(PurchaseDocJE_AP_AR.MagoLoginManager.LoginViaInfinityToken2Request request) {
            return base.Channel.LoginViaInfinityToken2Async(request);
        }
        
        public string GetIToken(string authenticationToken) {
            return base.Channel.GetIToken(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<string> GetITokenAsync(string authenticationToken) {
            return base.Channel.GetITokenAsync(authenticationToken);
        }
        
        public string GetPATToken(string authenticationToken) {
            return base.Channel.GetPATToken(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<string> GetPATTokenAsync(string authenticationToken) {
            return base.Channel.GetPATTokenAsync(authenticationToken);
        }
        
        public string GetServiceUserPasswordExpiration() {
            return base.Channel.GetServiceUserPasswordExpiration();
        }
        
        public System.Threading.Tasks.Task<string> GetServiceUserPasswordExpirationAsync() {
            return base.Channel.GetServiceUserPasswordExpirationAsync();
        }
        
        public bool ExistsSSOIDUser(string cryptedToken) {
            return base.Channel.ExistsSSOIDUser(cryptedToken);
        }
        
        public System.Threading.Tasks.Task<bool> ExistsSSOIDUserAsync(string cryptedToken) {
            return base.Channel.ExistsSSOIDUserAsync(cryptedToken);
        }
        
        public int LoginCheck(string userName, string password) {
            return base.Channel.LoginCheck(userName, password);
        }
        
        public System.Threading.Tasks.Task<int> LoginCheckAsync(string userName, string password) {
            return base.Channel.LoginCheckAsync(userName, password);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PurchaseDocJE_AP_AR.MagoLoginManager.LoginResponse PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap.Login(PurchaseDocJE_AP_AR.MagoLoginManager.LoginRequest request) {
            return base.Channel.Login(request);
        }
        
        public int Login(
                    ref string userName, 
                    ref string companyName, 
                    string password, 
                    string askingProcess, 
                    bool overWriteLogin, 
                    out bool admin, 
                    out string authenticationToken, 
                    out int companyId, 
                    out string dbName, 
                    out string dbServer, 
                    out int providerId, 
                    out bool security, 
                    out bool auditing, 
                    out bool useKeyedUpdate, 
                    out bool transactionUse, 
                    out string preferredLanguage, 
                    out string applicationLanguage, 
                    out string providerName, 
                    out string providerDescription, 
                    out bool useConstParameter, 
                    out bool stripTrailingSpaces, 
                    out string providerCompanyConnectionString, 
                    out string nonProviderCompanyConnectionString, 
                    out string dbUser, 
                    out string activationDB) {
            PurchaseDocJE_AP_AR.MagoLoginManager.LoginRequest inValue = new PurchaseDocJE_AP_AR.MagoLoginManager.LoginRequest();
            inValue.userName = userName;
            inValue.companyName = companyName;
            inValue.password = password;
            inValue.askingProcess = askingProcess;
            inValue.overWriteLogin = overWriteLogin;
            PurchaseDocJE_AP_AR.MagoLoginManager.LoginResponse retVal = ((PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap)(this)).Login(inValue);
            userName = retVal.userName;
            companyName = retVal.companyName;
            admin = retVal.admin;
            authenticationToken = retVal.authenticationToken;
            companyId = retVal.companyId;
            dbName = retVal.dbName;
            dbServer = retVal.dbServer;
            providerId = retVal.providerId;
            security = retVal.security;
            auditing = retVal.auditing;
            useKeyedUpdate = retVal.useKeyedUpdate;
            transactionUse = retVal.transactionUse;
            preferredLanguage = retVal.preferredLanguage;
            applicationLanguage = retVal.applicationLanguage;
            providerName = retVal.providerName;
            providerDescription = retVal.providerDescription;
            useConstParameter = retVal.useConstParameter;
            stripTrailingSpaces = retVal.stripTrailingSpaces;
            providerCompanyConnectionString = retVal.providerCompanyConnectionString;
            nonProviderCompanyConnectionString = retVal.nonProviderCompanyConnectionString;
            dbUser = retVal.dbUser;
            activationDB = retVal.activationDB;
            return retVal.LoginResult;
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.LoginResponse> LoginAsync(PurchaseDocJE_AP_AR.MagoLoginManager.LoginRequest request) {
            return base.Channel.LoginAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PurchaseDocJE_AP_AR.MagoLoginManager.Login2Response PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap.Login2(PurchaseDocJE_AP_AR.MagoLoginManager.Login2Request request) {
            return base.Channel.Login2(request);
        }
        
        public int Login2(
                    ref string userName, 
                    ref string companyName, 
                    string password, 
                    string askingProcess, 
                    string macIp, 
                    bool overWriteLogin, 
                    out bool admin, 
                    out string authenticationToken, 
                    out int companyId, 
                    out string dbName, 
                    out string dbServer, 
                    out int providerId, 
                    out bool security, 
                    out bool auditing, 
                    out bool useKeyedUpdate, 
                    out bool transactionUse, 
                    out string preferredLanguage, 
                    out string applicationLanguage, 
                    out string providerName, 
                    out string providerDescription, 
                    out bool useConstParameter, 
                    out bool stripTrailingSpaces, 
                    out string providerCompanyConnectionString, 
                    out string nonProviderCompanyConnectionString, 
                    out string dbUser, 
                    out string activationDB) {
            PurchaseDocJE_AP_AR.MagoLoginManager.Login2Request inValue = new PurchaseDocJE_AP_AR.MagoLoginManager.Login2Request();
            inValue.userName = userName;
            inValue.companyName = companyName;
            inValue.password = password;
            inValue.askingProcess = askingProcess;
            inValue.macIp = macIp;
            inValue.overWriteLogin = overWriteLogin;
            PurchaseDocJE_AP_AR.MagoLoginManager.Login2Response retVal = ((PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap)(this)).Login2(inValue);
            userName = retVal.userName;
            companyName = retVal.companyName;
            admin = retVal.admin;
            authenticationToken = retVal.authenticationToken;
            companyId = retVal.companyId;
            dbName = retVal.dbName;
            dbServer = retVal.dbServer;
            providerId = retVal.providerId;
            security = retVal.security;
            auditing = retVal.auditing;
            useKeyedUpdate = retVal.useKeyedUpdate;
            transactionUse = retVal.transactionUse;
            preferredLanguage = retVal.preferredLanguage;
            applicationLanguage = retVal.applicationLanguage;
            providerName = retVal.providerName;
            providerDescription = retVal.providerDescription;
            useConstParameter = retVal.useConstParameter;
            stripTrailingSpaces = retVal.stripTrailingSpaces;
            providerCompanyConnectionString = retVal.providerCompanyConnectionString;
            nonProviderCompanyConnectionString = retVal.nonProviderCompanyConnectionString;
            dbUser = retVal.dbUser;
            activationDB = retVal.activationDB;
            return retVal.Login2Result;
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.Login2Response> Login2Async(PurchaseDocJE_AP_AR.MagoLoginManager.Login2Request request) {
            return base.Channel.Login2Async(request);
        }
        
        public bool ConfirmToken(string authenticationToken, string procType) {
            return base.Channel.ConfirmToken(authenticationToken, procType);
        }
        
        public System.Threading.Tasks.Task<bool> ConfirmTokenAsync(string authenticationToken, string procType) {
            return base.Channel.ConfirmTokenAsync(authenticationToken, procType);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PurchaseDocJE_AP_AR.MagoLoginManager.GetLoginInformationResponse PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap.GetLoginInformation(PurchaseDocJE_AP_AR.MagoLoginManager.GetLoginInformationRequest request) {
            return base.Channel.GetLoginInformation(request);
        }
        
        public bool GetLoginInformation(
                    string authenticationToken, 
                    out string userName, 
                    out int loginId, 
                    out string companyName, 
                    out int companyId, 
                    out bool admin, 
                    out string dbName, 
                    out string dbServer, 
                    out int providerId, 
                    out bool security, 
                    out bool auditing, 
                    out bool useKeyedUpdate, 
                    out bool transactionUse, 
                    out bool useUnicode, 
                    out string preferredLanguage, 
                    out string applicationLanguage, 
                    out string providerName, 
                    out string providerDescription, 
                    out bool useConstParameter, 
                    out bool stripTrailingSpaces, 
                    out string providerCompanyConnectionString, 
                    out string nonProviderCompanyConnectionString, 
                    out string dbUser, 
                    out string processName, 
                    out string userDescription, 
                    out string email, 
                    out bool easyBuilderDeveloper, 
                    out bool rowSecurity, 
                    out bool dataSynchro, 
                    out bool cgm) {
            PurchaseDocJE_AP_AR.MagoLoginManager.GetLoginInformationRequest inValue = new PurchaseDocJE_AP_AR.MagoLoginManager.GetLoginInformationRequest();
            inValue.authenticationToken = authenticationToken;
            PurchaseDocJE_AP_AR.MagoLoginManager.GetLoginInformationResponse retVal = ((PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap)(this)).GetLoginInformation(inValue);
            userName = retVal.userName;
            loginId = retVal.loginId;
            companyName = retVal.companyName;
            companyId = retVal.companyId;
            admin = retVal.admin;
            dbName = retVal.dbName;
            dbServer = retVal.dbServer;
            providerId = retVal.providerId;
            security = retVal.security;
            auditing = retVal.auditing;
            useKeyedUpdate = retVal.useKeyedUpdate;
            transactionUse = retVal.transactionUse;
            useUnicode = retVal.useUnicode;
            preferredLanguage = retVal.preferredLanguage;
            applicationLanguage = retVal.applicationLanguage;
            providerName = retVal.providerName;
            providerDescription = retVal.providerDescription;
            useConstParameter = retVal.useConstParameter;
            stripTrailingSpaces = retVal.stripTrailingSpaces;
            providerCompanyConnectionString = retVal.providerCompanyConnectionString;
            nonProviderCompanyConnectionString = retVal.nonProviderCompanyConnectionString;
            dbUser = retVal.dbUser;
            processName = retVal.processName;
            userDescription = retVal.userDescription;
            email = retVal.email;
            easyBuilderDeveloper = retVal.easyBuilderDeveloper;
            rowSecurity = retVal.rowSecurity;
            dataSynchro = retVal.dataSynchro;
            cgm = retVal.cgm;
            return retVal.GetLoginInformationResult;
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.GetLoginInformationResponse> GetLoginInformationAsync(PurchaseDocJE_AP_AR.MagoLoginManager.GetLoginInformationRequest request) {
            return base.Channel.GetLoginInformationAsync(request);
        }
        
        public void LogOff(string authenticationToken) {
            base.Channel.LogOff(authenticationToken);
        }
        
        public System.Threading.Tasks.Task LogOffAsync(string authenticationToken) {
            return base.Channel.LogOffAsync(authenticationToken);
        }
        
        public string GetUserName(int loginId) {
            return base.Channel.GetUserName(loginId);
        }
        
        public System.Threading.Tasks.Task<string> GetUserNameAsync(int loginId) {
            return base.Channel.GetUserNameAsync(loginId);
        }
        
        public string GetUserDescriptionById(int loginId) {
            return base.Channel.GetUserDescriptionById(loginId);
        }
        
        public System.Threading.Tasks.Task<string> GetUserDescriptionByIdAsync(int loginId) {
            return base.Channel.GetUserDescriptionByIdAsync(loginId);
        }
        
        public string GetUserDescriptionByName(string login) {
            return base.Channel.GetUserDescriptionByName(login);
        }
        
        public System.Threading.Tasks.Task<string> GetUserDescriptionByNameAsync(string login) {
            return base.Channel.GetUserDescriptionByNameAsync(login);
        }
        
        public string GetUserEMailByName(string login) {
            return base.Channel.GetUserEMailByName(login);
        }
        
        public System.Threading.Tasks.Task<string> GetUserEMailByNameAsync(string login) {
            return base.Channel.GetUserEMailByNameAsync(login);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PurchaseDocJE_AP_AR.MagoLoginManager.IsFloatingUserResponse PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap.IsFloatingUser(PurchaseDocJE_AP_AR.MagoLoginManager.IsFloatingUserRequest request) {
            return base.Channel.IsFloatingUser(request);
        }
        
        public bool IsFloatingUser(string loginName, out bool floating) {
            PurchaseDocJE_AP_AR.MagoLoginManager.IsFloatingUserRequest inValue = new PurchaseDocJE_AP_AR.MagoLoginManager.IsFloatingUserRequest();
            inValue.loginName = loginName;
            PurchaseDocJE_AP_AR.MagoLoginManager.IsFloatingUserResponse retVal = ((PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap)(this)).IsFloatingUser(inValue);
            floating = retVal.floating;
            return retVal.IsFloatingUserResult;
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.IsFloatingUserResponse> IsFloatingUserAsync(PurchaseDocJE_AP_AR.MagoLoginManager.IsFloatingUserRequest request) {
            return base.Channel.IsFloatingUserAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PurchaseDocJE_AP_AR.MagoLoginManager.IsWebUserResponse PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap.IsWebUser(PurchaseDocJE_AP_AR.MagoLoginManager.IsWebUserRequest request) {
            return base.Channel.IsWebUser(request);
        }
        
        public bool IsWebUser(string loginName, out bool web) {
            PurchaseDocJE_AP_AR.MagoLoginManager.IsWebUserRequest inValue = new PurchaseDocJE_AP_AR.MagoLoginManager.IsWebUserRequest();
            inValue.loginName = loginName;
            PurchaseDocJE_AP_AR.MagoLoginManager.IsWebUserResponse retVal = ((PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap)(this)).IsWebUser(inValue);
            web = retVal.web;
            return retVal.IsWebUserResult;
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.IsWebUserResponse> IsWebUserAsync(PurchaseDocJE_AP_AR.MagoLoginManager.IsWebUserRequest request) {
            return base.Channel.IsWebUserAsync(request);
        }
        
        public bool IsWinNT(int loginId) {
            return base.Channel.IsWinNT(loginId);
        }
        
        public System.Threading.Tasks.Task<bool> IsWinNTAsync(int loginId) {
            return base.Channel.IsWinNTAsync(loginId);
        }
        
        public string GetDbOwner(int companyId) {
            return base.Channel.GetDbOwner(companyId);
        }
        
        public System.Threading.Tasks.Task<string> GetDbOwnerAsync(int companyId) {
            return base.Channel.GetDbOwnerAsync(companyId);
        }
        
        public bool IsCompanySecured(int companyId) {
            return base.Channel.IsCompanySecured(companyId);
        }
        
        public System.Threading.Tasks.Task<bool> IsCompanySecuredAsync(int companyId) {
            return base.Channel.IsCompanySecuredAsync(companyId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PurchaseDocJE_AP_AR.MagoLoginManager.GetAuthenticationInformationsResponse PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap.GetAuthenticationInformations(PurchaseDocJE_AP_AR.MagoLoginManager.GetAuthenticationInformationsRequest request) {
            return base.Channel.GetAuthenticationInformations(request);
        }
        
        public bool GetAuthenticationInformations(string authenticationToken, out int loginId, out int companyId, out bool webLogin) {
            PurchaseDocJE_AP_AR.MagoLoginManager.GetAuthenticationInformationsRequest inValue = new PurchaseDocJE_AP_AR.MagoLoginManager.GetAuthenticationInformationsRequest();
            inValue.authenticationToken = authenticationToken;
            PurchaseDocJE_AP_AR.MagoLoginManager.GetAuthenticationInformationsResponse retVal = ((PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap)(this)).GetAuthenticationInformations(inValue);
            loginId = retVal.loginId;
            companyId = retVal.companyId;
            webLogin = retVal.webLogin;
            return retVal.GetAuthenticationInformationsResult;
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.GetAuthenticationInformationsResponse> GetAuthenticationInformationsAsync(PurchaseDocJE_AP_AR.MagoLoginManager.GetAuthenticationInformationsRequest request) {
            return base.Channel.GetAuthenticationInformationsAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PurchaseDocJE_AP_AR.MagoLoginManager.GetAuthenticationNamesResponse PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap.GetAuthenticationNames(PurchaseDocJE_AP_AR.MagoLoginManager.GetAuthenticationNamesRequest request) {
            return base.Channel.GetAuthenticationNames(request);
        }
        
        public bool GetAuthenticationNames(string authenticationToken, out string userName, out string companyName) {
            PurchaseDocJE_AP_AR.MagoLoginManager.GetAuthenticationNamesRequest inValue = new PurchaseDocJE_AP_AR.MagoLoginManager.GetAuthenticationNamesRequest();
            inValue.authenticationToken = authenticationToken;
            PurchaseDocJE_AP_AR.MagoLoginManager.GetAuthenticationNamesResponse retVal = ((PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap)(this)).GetAuthenticationNames(inValue);
            userName = retVal.userName;
            companyName = retVal.companyName;
            return retVal.GetAuthenticationNamesResult;
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.GetAuthenticationNamesResponse> GetAuthenticationNamesAsync(PurchaseDocJE_AP_AR.MagoLoginManager.GetAuthenticationNamesRequest request) {
            return base.Channel.GetAuthenticationNamesAsync(request);
        }
        
        public bool DeleteAssociation(int loginId, int companyId, string authenticationToken) {
            return base.Channel.DeleteAssociation(loginId, companyId, authenticationToken);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAssociationAsync(int loginId, int companyId, string authenticationToken) {
            return base.Channel.DeleteAssociationAsync(loginId, companyId, authenticationToken);
        }
        
        public bool DeleteUser(int loginId, string authenticationToken) {
            return base.Channel.DeleteUser(loginId, authenticationToken);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(int loginId, string authenticationToken) {
            return base.Channel.DeleteUserAsync(loginId, authenticationToken);
        }
        
        public bool DeleteCompany(int companyId, string authenticationToken) {
            return base.Channel.DeleteCompany(companyId, authenticationToken);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCompanyAsync(int companyId, string authenticationToken) {
            return base.Channel.DeleteCompanyAsync(companyId, authenticationToken);
        }
        
        public string GetSystemDBConnectionString(string authenticationToken) {
            return base.Channel.GetSystemDBConnectionString(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<string> GetSystemDBConnectionStringAsync(string authenticationToken) {
            return base.Channel.GetSystemDBConnectionStringAsync(authenticationToken);
        }
        
        public string GetDMSConnectionString(string authenticationToken) {
            return base.Channel.GetDMSConnectionString(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<string> GetDMSConnectionStringAsync(string authenticationToken) {
            return base.Channel.GetDMSConnectionStringAsync(authenticationToken);
        }
        
        public bool Sql2012Allowed(string authToken) {
            return base.Channel.Sql2012Allowed(authToken);
        }
        
        public System.Threading.Tasks.Task<bool> Sql2012AllowedAsync(string authToken) {
            return base.Channel.Sql2012AllowedAsync(authToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PurchaseDocJE_AP_AR.MagoLoginManager.SetDefaultSchemaResponse PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap.SetDefaultSchema(PurchaseDocJE_AP_AR.MagoLoginManager.SetDefaultSchemaRequest request) {
            return base.Channel.SetDefaultSchema(request);
        }
        
        public bool SetDefaultSchema(string authenticationToken, string company, out string d, out string c, out int p) {
            PurchaseDocJE_AP_AR.MagoLoginManager.SetDefaultSchemaRequest inValue = new PurchaseDocJE_AP_AR.MagoLoginManager.SetDefaultSchemaRequest();
            inValue.authenticationToken = authenticationToken;
            inValue.company = company;
            PurchaseDocJE_AP_AR.MagoLoginManager.SetDefaultSchemaResponse retVal = ((PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap)(this)).SetDefaultSchema(inValue);
            d = retVal.d;
            c = retVal.c;
            p = retVal.p;
            return retVal.SetDefaultSchemaResult;
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.SetDefaultSchemaResponse> SetDefaultSchemaAsync(PurchaseDocJE_AP_AR.MagoLoginManager.SetDefaultSchemaRequest request) {
            return base.Channel.SetDefaultSchemaAsync(request);
        }
        
        public PurchaseDocJE_AP_AR.MagoLoginManager.DmsDatabaseInfo[] GetDMSDatabasesInfo(string authenticationToken) {
            return base.Channel.GetDMSDatabasesInfo(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.DmsDatabaseInfo[]> GetDMSDatabasesInfoAsync(string authenticationToken) {
            return base.Channel.GetDMSDatabasesInfoAsync(authenticationToken);
        }
        
        public PurchaseDocJE_AP_AR.MagoLoginManager.DataSynchroDatabaseInfo[] GetDataSynchroDatabasesInfo(string authenticationToken) {
            return base.Channel.GetDataSynchroDatabasesInfo(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.DataSynchroDatabaseInfo[]> GetDataSynchroDatabasesInfoAsync(string authenticationToken) {
            return base.Channel.GetDataSynchroDatabasesInfoAsync(authenticationToken);
        }
        
        public PurchaseDocJE_AP_AR.MagoLoginManager.TbSenderDatabaseInfo[] GetCompanyDatabasesInfo(string authenticationToken) {
            return base.Channel.GetCompanyDatabasesInfo(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.TbSenderDatabaseInfo[]> GetCompanyDatabasesInfoAsync(string authenticationToken) {
            return base.Channel.GetCompanyDatabasesInfoAsync(authenticationToken);
        }
        
        public string GetEdition() {
            return base.Channel.GetEdition();
        }
        
        public System.Threading.Tasks.Task<string> GetEditionAsync() {
            return base.Channel.GetEditionAsync();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PurchaseDocJE_AP_AR.MagoLoginManager.GetConfigurationStreamResponse PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap.GetConfigurationStream(PurchaseDocJE_AP_AR.MagoLoginManager.GetConfigurationStreamRequest request) {
            return base.Channel.GetConfigurationStream(request);
        }
        
        public byte[] GetConfigurationStream() {
            PurchaseDocJE_AP_AR.MagoLoginManager.GetConfigurationStreamRequest inValue = new PurchaseDocJE_AP_AR.MagoLoginManager.GetConfigurationStreamRequest();
            PurchaseDocJE_AP_AR.MagoLoginManager.GetConfigurationStreamResponse retVal = ((PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap)(this)).GetConfigurationStream(inValue);
            return retVal.GetConfigurationStreamResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.GetConfigurationStreamResponse> PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap.GetConfigurationStreamAsync(PurchaseDocJE_AP_AR.MagoLoginManager.GetConfigurationStreamRequest request) {
            return base.Channel.GetConfigurationStreamAsync(request);
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.GetConfigurationStreamResponse> GetConfigurationStreamAsync() {
            PurchaseDocJE_AP_AR.MagoLoginManager.GetConfigurationStreamRequest inValue = new PurchaseDocJE_AP_AR.MagoLoginManager.GetConfigurationStreamRequest();
            return ((PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap)(this)).GetConfigurationStreamAsync(inValue);
        }
        
        public string GetCountry() {
            return base.Channel.GetCountry();
        }
        
        public System.Threading.Tasks.Task<string> GetCountryAsync() {
            return base.Channel.GetCountryAsync();
        }
        
        public string GetProviderNameFromCompanyId(int companyId) {
            return base.Channel.GetProviderNameFromCompanyId(companyId);
        }
        
        public System.Threading.Tasks.Task<string> GetProviderNameFromCompanyIdAsync(int companyId) {
            return base.Channel.GetProviderNameFromCompanyIdAsync(companyId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PurchaseDocJE_AP_AR.MagoLoginManager.GetInstallationVersionResponse PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap.GetInstallationVersion(PurchaseDocJE_AP_AR.MagoLoginManager.GetInstallationVersionRequest request) {
            return base.Channel.GetInstallationVersion(request);
        }
        
        public string GetInstallationVersion(out string productName, out System.DateTime buildDate, out System.DateTime instDate, out int build) {
            PurchaseDocJE_AP_AR.MagoLoginManager.GetInstallationVersionRequest inValue = new PurchaseDocJE_AP_AR.MagoLoginManager.GetInstallationVersionRequest();
            PurchaseDocJE_AP_AR.MagoLoginManager.GetInstallationVersionResponse retVal = ((PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap)(this)).GetInstallationVersion(inValue);
            productName = retVal.productName;
            buildDate = retVal.buildDate;
            instDate = retVal.instDate;
            build = retVal.build;
            return retVal.GetInstallationVersionResult;
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.GetInstallationVersionResponse> GetInstallationVersionAsync(PurchaseDocJE_AP_AR.MagoLoginManager.GetInstallationVersionRequest request) {
            return base.Channel.GetInstallationVersionAsync(request);
        }
        
        public string GetUserInfo() {
            return base.Channel.GetUserInfo();
        }
        
        public System.Threading.Tasks.Task<string> GetUserInfoAsync() {
            return base.Channel.GetUserInfoAsync();
        }
        
        public string GetUserInfoID() {
            return base.Channel.GetUserInfoID();
        }
        
        public System.Threading.Tasks.Task<string> GetUserInfoIDAsync() {
            return base.Channel.GetUserInfoIDAsync();
        }
        
        public void TraceAction(string company, string login, int type, string processName, string winUser, string location) {
            base.Channel.TraceAction(company, login, type, processName, winUser, location);
        }
        
        public System.Threading.Tasks.Task TraceActionAsync(string company, string login, int type, string processName, string winUser, string location) {
            return base.Channel.TraceActionAsync(company, login, type, processName, winUser, location);
        }
        
        public bool HasUserAlreadyChangedPasswordToday(string user) {
            return base.Channel.HasUserAlreadyChangedPasswordToday(user);
        }
        
        public System.Threading.Tasks.Task<bool> HasUserAlreadyChangedPasswordTodayAsync(string user) {
            return base.Channel.HasUserAlreadyChangedPasswordTodayAsync(user);
        }
        
        public string GetBrandedApplicationTitle(string application) {
            return base.Channel.GetBrandedApplicationTitle(application);
        }
        
        public System.Threading.Tasks.Task<string> GetBrandedApplicationTitleAsync(string application) {
            return base.Channel.GetBrandedApplicationTitleAsync(application);
        }
        
        public string GetMasterProductBrandedName() {
            return base.Channel.GetMasterProductBrandedName();
        }
        
        public System.Threading.Tasks.Task<string> GetMasterProductBrandedNameAsync() {
            return base.Channel.GetMasterProductBrandedNameAsync();
        }
        
        public string GetMasterSolutionBrandedName() {
            return base.Channel.GetMasterSolutionBrandedName();
        }
        
        public System.Threading.Tasks.Task<string> GetMasterSolutionBrandedNameAsync() {
            return base.Channel.GetMasterSolutionBrandedNameAsync();
        }
        
        public string GetMasterSolution() {
            return base.Channel.GetMasterSolution();
        }
        
        public System.Threading.Tasks.Task<string> GetMasterSolutionAsync() {
            return base.Channel.GetMasterSolutionAsync();
        }
        
        public string GetBrandedProducerName() {
            return base.Channel.GetBrandedProducerName();
        }
        
        public System.Threading.Tasks.Task<string> GetBrandedProducerNameAsync() {
            return base.Channel.GetBrandedProducerNameAsync();
        }
        
        public string GetBrandedProductTitle() {
            return base.Channel.GetBrandedProductTitle();
        }
        
        public System.Threading.Tasks.Task<string> GetBrandedProductTitleAsync() {
            return base.Channel.GetBrandedProductTitleAsync();
        }
        
        public string GetBrandedKey(string source) {
            return base.Channel.GetBrandedKey(source);
        }
        
        public System.Threading.Tasks.Task<string> GetBrandedKeyAsync(string source) {
            return base.Channel.GetBrandedKeyAsync(source);
        }
        
        public PurchaseDocJE_AP_AR.MagoLoginManager.DBNetworkType GetDBNetworkType() {
            return base.Channel.GetDBNetworkType();
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.DBNetworkType> GetDBNetworkTypeAsync() {
            return base.Channel.GetDBNetworkTypeAsync();
        }
        
        public string GetDatabaseType(string providerName) {
            return base.Channel.GetDatabaseType(providerName);
        }
        
        public System.Threading.Tasks.Task<string> GetDatabaseTypeAsync(string providerName) {
            return base.Channel.GetDatabaseTypeAsync(providerName);
        }
        
        public bool CanUseNamespace(string nameSpace, string authenticationToken, PurchaseDocJE_AP_AR.MagoLoginManager.GrantType grantType) {
            return base.Channel.CanUseNamespace(nameSpace, authenticationToken, grantType);
        }
        
        public System.Threading.Tasks.Task<bool> CanUseNamespaceAsync(string nameSpace, string authenticationToken, PurchaseDocJE_AP_AR.MagoLoginManager.GrantType grantType) {
            return base.Channel.CanUseNamespaceAsync(nameSpace, authenticationToken, grantType);
        }
        
        public bool CacheCounter() {
            return base.Channel.CacheCounter();
        }
        
        public System.Threading.Tasks.Task<bool> CacheCounterAsync() {
            return base.Channel.CacheCounterAsync();
        }
        
        public PurchaseDocJE_AP_AR.MagoLoginManager.SerialNumberType CacheCounterGTG() {
            return base.Channel.CacheCounterGTG();
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.SerialNumberType> CacheCounterGTGAsync() {
            return base.Channel.CacheCounterGTGAsync();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PurchaseDocJE_AP_AR.MagoLoginManager.SetCurrentComponentsResponse PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap.SetCurrentComponents(PurchaseDocJE_AP_AR.MagoLoginManager.SetCurrentComponentsRequest request) {
            return base.Channel.SetCurrentComponents(request);
        }
        
        public PurchaseDocJE_AP_AR.MagoLoginManager.ActivationState SetCurrentComponents(out int dte) {
            PurchaseDocJE_AP_AR.MagoLoginManager.SetCurrentComponentsRequest inValue = new PurchaseDocJE_AP_AR.MagoLoginManager.SetCurrentComponentsRequest();
            PurchaseDocJE_AP_AR.MagoLoginManager.SetCurrentComponentsResponse retVal = ((PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap)(this)).SetCurrentComponents(inValue);
            dte = retVal.dte;
            return retVal.SetCurrentComponentsResult;
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.SetCurrentComponentsResponse> SetCurrentComponentsAsync(PurchaseDocJE_AP_AR.MagoLoginManager.SetCurrentComponentsRequest request) {
            return base.Channel.SetCurrentComponentsAsync(request);
        }
        
        public bool IsVirginActivation() {
            return base.Channel.IsVirginActivation();
        }
        
        public System.Threading.Tasks.Task<bool> IsVirginActivationAsync() {
            return base.Channel.IsVirginActivationAsync();
        }
        
        public int HD() {
            return base.Channel.HD();
        }
        
        public System.Threading.Tasks.Task<int> HDAsync() {
            return base.Channel.HDAsync();
        }
        
        public void StoreMLUChoice(bool userChoseMluInChargeToMicroarea) {
            base.Channel.StoreMLUChoice(userChoseMluInChargeToMicroarea);
        }
        
        public System.Threading.Tasks.Task StoreMLUChoiceAsync(bool userChoseMluInChargeToMicroarea) {
            return base.Channel.StoreMLUChoiceAsync(userChoseMluInChargeToMicroarea);
        }
        
        public bool SaveLicensed(string xml, string name) {
            return base.Channel.SaveLicensed(xml, name);
        }
        
        public System.Threading.Tasks.Task<bool> SaveLicensedAsync(string xml, string name) {
            return base.Channel.SaveLicensedAsync(xml, name);
        }
        
        public string ValidateIToken(string itoken, string authenticationToken) {
            return base.Channel.ValidateIToken(itoken, authenticationToken);
        }
        
        public System.Threading.Tasks.Task<string> ValidateITokenAsync(string itoken, string authenticationToken) {
            return base.Channel.ValidateITokenAsync(itoken, authenticationToken);
        }
        
        public bool SaveUserInfo(string xml) {
            return base.Channel.SaveUserInfo(xml);
        }
        
        public System.Threading.Tasks.Task<bool> SaveUserInfoAsync(string xml) {
            return base.Channel.SaveUserInfoAsync(xml);
        }
        
        public void DeleteUserInfo() {
            base.Channel.DeleteUserInfo();
        }
        
        public System.Threading.Tasks.Task DeleteUserInfoAsync() {
            return base.Channel.DeleteUserInfoAsync();
        }
        
        public void DeleteLicensed(string name) {
            base.Channel.DeleteLicensed(name);
        }
        
        public System.Threading.Tasks.Task DeleteLicensedAsync(string name) {
            return base.Channel.DeleteLicensedAsync(name);
        }
        
        public string PrePing() {
            return base.Channel.PrePing();
        }
        
        public System.Threading.Tasks.Task<string> PrePingAsync() {
            return base.Channel.PrePingAsync();
        }
        
        public string Ping() {
            return base.Channel.Ping();
        }
        
        public System.Threading.Tasks.Task<string> PingAsync() {
            return base.Channel.PingAsync();
        }
        
        public PurchaseDocJE_AP_AR.MagoLoginManager.ModuleNameInfo[] GetArticlesWithNamedCal() {
            return base.Channel.GetArticlesWithNamedCal();
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.ModuleNameInfo[]> GetArticlesWithNamedCalAsync() {
            return base.Channel.GetArticlesWithNamedCalAsync();
        }
        
        public PurchaseDocJE_AP_AR.MagoLoginManager.ModuleNameInfo[] GetArticlesWithFloatingCal() {
            return base.Channel.GetArticlesWithFloatingCal();
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.ModuleNameInfo[]> GetArticlesWithFloatingCalAsync() {
            return base.Channel.GetArticlesWithFloatingCalAsync();
        }
        
        public void RefreshFloatingMark() {
            base.Channel.RefreshFloatingMark();
        }
        
        public System.Threading.Tasks.Task RefreshFloatingMarkAsync() {
            return base.Channel.RefreshFloatingMarkAsync();
        }
        
        public void RefreshSecurityStatus() {
            base.Channel.RefreshSecurityStatus();
        }
        
        public System.Threading.Tasks.Task RefreshSecurityStatusAsync() {
            return base.Channel.RefreshSecurityStatusAsync();
        }
        
        public int GetProxySupportVersion() {
            return base.Channel.GetProxySupportVersion();
        }
        
        public System.Threading.Tasks.Task<int> GetProxySupportVersionAsync() {
            return base.Channel.GetProxySupportVersionAsync();
        }
        
        public PurchaseDocJE_AP_AR.MagoLoginManager.ProxySettings GetProxySettings() {
            return base.Channel.GetProxySettings();
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.ProxySettings> GetProxySettingsAsync() {
            return base.Channel.GetProxySettingsAsync();
        }
        
        public void SetProxySettings(PurchaseDocJE_AP_AR.MagoLoginManager.ProxySettings proxySettings) {
            base.Channel.SetProxySettings(proxySettings);
        }
        
        public System.Threading.Tasks.Task SetProxySettingsAsync(PurchaseDocJE_AP_AR.MagoLoginManager.ProxySettings proxySettings) {
            return base.Channel.SetProxySettingsAsync(proxySettings);
        }
        
        public string GetUserLanguage(string autenticationToken) {
            return base.Channel.GetUserLanguage(autenticationToken);
        }
        
        public System.Threading.Tasks.Task<string> GetUserLanguageAsync(string autenticationToken) {
            return base.Channel.GetUserLanguageAsync(autenticationToken);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        PurchaseDocJE_AP_AR.MagoLoginManager.GetCompanyLanguageResponse PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap.GetCompanyLanguage(PurchaseDocJE_AP_AR.MagoLoginManager.GetCompanyLanguageRequest request) {
            return base.Channel.GetCompanyLanguage(request);
        }
        
        public bool GetCompanyLanguage(int companyID, out string cultureUI, out string culture) {
            PurchaseDocJE_AP_AR.MagoLoginManager.GetCompanyLanguageRequest inValue = new PurchaseDocJE_AP_AR.MagoLoginManager.GetCompanyLanguageRequest();
            inValue.companyID = companyID;
            PurchaseDocJE_AP_AR.MagoLoginManager.GetCompanyLanguageResponse retVal = ((PurchaseDocJE_AP_AR.MagoLoginManager.MicroareaLoginManagerSoap)(this)).GetCompanyLanguage(inValue);
            cultureUI = retVal.cultureUI;
            culture = retVal.culture;
            return retVal.GetCompanyLanguageResult;
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.GetCompanyLanguageResponse> GetCompanyLanguageAsync(PurchaseDocJE_AP_AR.MagoLoginManager.GetCompanyLanguageRequest request) {
            return base.Channel.GetCompanyLanguageAsync(request);
        }
        
        public bool IsValidUpToDateToken(string authenticationToken, string mluexpired) {
            return base.Channel.IsValidUpToDateToken(authenticationToken, mluexpired);
        }
        
        public System.Threading.Tasks.Task<bool> IsValidUpToDateTokenAsync(string authenticationToken, string mluexpired) {
            return base.Channel.IsValidUpToDateTokenAsync(authenticationToken, mluexpired);
        }
        
        public bool IsValidToken(string authenticationToken) {
            return base.Channel.IsValidToken(authenticationToken);
        }
        
        public System.Threading.Tasks.Task<bool> IsValidTokenAsync(string authenticationToken) {
            return base.Channel.IsValidTokenAsync(authenticationToken);
        }
        
        public void ReloadUserArticleBindings(string authenticationToken) {
            base.Channel.ReloadUserArticleBindings(authenticationToken);
        }
        
        public System.Threading.Tasks.Task ReloadUserArticleBindingsAsync(string authenticationToken) {
            return base.Channel.ReloadUserArticleBindingsAsync(authenticationToken);
        }
        
        public bool FEUsed(string authenticationToken, bool val) {
            return base.Channel.FEUsed(authenticationToken, val);
        }
        
        public System.Threading.Tasks.Task<bool> FEUsedAsync(string authenticationToken, bool val) {
            return base.Channel.FEUsedAsync(authenticationToken, val);
        }
        
        public bool Sbrill(string token) {
            return base.Channel.Sbrill(token);
        }
        
        public System.Threading.Tasks.Task<bool> SbrillAsync(string token) {
            return base.Channel.SbrillAsync(token);
        }
        
        public PurchaseDocJE_AP_AR.MagoLoginManager.LoginSlotType GetCalType(string token) {
            return base.Channel.GetCalType(token);
        }
        
        public System.Threading.Tasks.Task<PurchaseDocJE_AP_AR.MagoLoginManager.LoginSlotType> GetCalTypeAsync(string token) {
            return base.Channel.GetCalTypeAsync(token);
        }
        
        public bool IsUserLoggedByName(string userName) {
            return base.Channel.IsUserLoggedByName(userName);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserLoggedByNameAsync(string userName) {
            return base.Channel.IsUserLoggedByNameAsync(userName);
        }
        
        public bool IsUserLogged(int loginID) {
            return base.Channel.IsUserLogged(loginID);
        }
        
        public System.Threading.Tasks.Task<bool> IsUserLoggedAsync(int loginID) {
            return base.Channel.IsUserLoggedAsync(loginID);
        }
        
        public bool IsSecurityLightEnabled() {
            return base.Channel.IsSecurityLightEnabled();
        }
        
        public System.Threading.Tasks.Task<bool> IsSecurityLightEnabledAsync() {
            return base.Channel.IsSecurityLightEnabledAsync();
        }
        
        public bool IsSecurityLightAccessAllowed(string nameSpace, string authenticationToken, bool unattended) {
            return base.Channel.IsSecurityLightAccessAllowed(nameSpace, authenticationToken, unattended);
        }
        
        public System.Threading.Tasks.Task<bool> IsSecurityLightAccessAllowedAsync(string nameSpace, string authenticationToken, bool unattended) {
            return base.Channel.IsSecurityLightAccessAllowedAsync(nameSpace, authenticationToken, unattended);
        }
        
        public int GetDBCultureLCID(int companyID) {
            return base.Channel.GetDBCultureLCID(companyID);
        }
        
        public System.Threading.Tasks.Task<int> GetDBCultureLCIDAsync(int companyID) {
            return base.Channel.GetDBCultureLCIDAsync(companyID);
        }
    }
}
