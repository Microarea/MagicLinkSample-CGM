//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace MagicLinkCGM.TbGenlibUI {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TbGenlibUISoap", Namespace="urn:Microarea.Web.Services")]
    public partial class TbGenlibUI : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private TBHeaderInfo headerInfoField;
        
        private System.Threading.SendOrPostCallback ExecOpenTextOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecOpenFormatterOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecOpenFontOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecManageFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnumsViewerOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetApplicationDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetApplicationDateIMagoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetApplicationDateToSystemDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetApplicationDate2OperationCompleted;
        
        private System.Threading.SendOrPostCallback SetFiscalCompanyOperationCompleted;
        
        private System.Threading.SendOrPostCallback ShowAboutFrameworkOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecOpenReportOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public TbGenlibUI() {
            this.Url = global::MagicLinkCGM.Properties.Settings.Default.MagicLinkCGM_TbGenlibUI_TbGenlibUI;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public TBHeaderInfo HeaderInfo {
            get {
                return this.headerInfoField;
            }
            set {
                this.headerInfoField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ExecOpenTextCompletedEventHandler ExecOpenTextCompleted;
        
        /// <remarks/>
        public event ExecOpenFormatterCompletedEventHandler ExecOpenFormatterCompleted;
        
        /// <remarks/>
        public event ExecOpenFontCompletedEventHandler ExecOpenFontCompleted;
        
        /// <remarks/>
        public event ExecManageFileCompletedEventHandler ExecManageFileCompleted;
        
        /// <remarks/>
        public event EnumsViewerCompletedEventHandler EnumsViewerCompleted;
        
        /// <remarks/>
        public event SetApplicationDateCompletedEventHandler SetApplicationDateCompleted;
        
        /// <remarks/>
        public event SetApplicationDateIMagoCompletedEventHandler SetApplicationDateIMagoCompleted;
        
        /// <remarks/>
        public event SetApplicationDateToSystemDateCompletedEventHandler SetApplicationDateToSystemDateCompleted;
        
        /// <remarks/>
        public event SetApplicationDate2CompletedEventHandler SetApplicationDate2Completed;
        
        /// <remarks/>
        public event SetFiscalCompanyCompletedEventHandler SetFiscalCompanyCompleted;
        
        /// <remarks/>
        public event ShowAboutFrameworkCompletedEventHandler ShowAboutFrameworkCompleted;
        
        /// <remarks/>
        public event ExecOpenReportCompletedEventHandler ExecOpenReportCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#ExecOpenText", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.ExecOpenText")]
        public bool ExecOpenText() {
            object[] results = this.Invoke("ExecOpenText", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ExecOpenTextAsync() {
            this.ExecOpenTextAsync(null);
        }
        
        /// <remarks/>
        public void ExecOpenTextAsync(object userState) {
            if ((this.ExecOpenTextOperationCompleted == null)) {
                this.ExecOpenTextOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecOpenTextOperationCompleted);
            }
            this.InvokeAsync("ExecOpenText", new object[0], this.ExecOpenTextOperationCompleted, userState);
        }
        
        private void OnExecOpenTextOperationCompleted(object arg) {
            if ((this.ExecOpenTextCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecOpenTextCompleted(this, new ExecOpenTextCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#ExecOpenFormatter", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.ExecOpenFormatter")]
        public bool ExecOpenFormatter() {
            object[] results = this.Invoke("ExecOpenFormatter", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ExecOpenFormatterAsync() {
            this.ExecOpenFormatterAsync(null);
        }
        
        /// <remarks/>
        public void ExecOpenFormatterAsync(object userState) {
            if ((this.ExecOpenFormatterOperationCompleted == null)) {
                this.ExecOpenFormatterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecOpenFormatterOperationCompleted);
            }
            this.InvokeAsync("ExecOpenFormatter", new object[0], this.ExecOpenFormatterOperationCompleted, userState);
        }
        
        private void OnExecOpenFormatterOperationCompleted(object arg) {
            if ((this.ExecOpenFormatterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecOpenFormatterCompleted(this, new ExecOpenFormatterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#ExecOpenFont", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.ExecOpenFont")]
        public bool ExecOpenFont() {
            object[] results = this.Invoke("ExecOpenFont", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ExecOpenFontAsync() {
            this.ExecOpenFontAsync(null);
        }
        
        /// <remarks/>
        public void ExecOpenFontAsync(object userState) {
            if ((this.ExecOpenFontOperationCompleted == null)) {
                this.ExecOpenFontOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecOpenFontOperationCompleted);
            }
            this.InvokeAsync("ExecOpenFont", new object[0], this.ExecOpenFontOperationCompleted, userState);
        }
        
        private void OnExecOpenFontOperationCompleted(object arg) {
            if ((this.ExecOpenFontCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecOpenFontCompleted(this, new ExecOpenFontCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#ExecManageFile", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.ExecManageFile")]
        public bool ExecManageFile() {
            object[] results = this.Invoke("ExecManageFile", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ExecManageFileAsync() {
            this.ExecManageFileAsync(null);
        }
        
        /// <remarks/>
        public void ExecManageFileAsync(object userState) {
            if ((this.ExecManageFileOperationCompleted == null)) {
                this.ExecManageFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecManageFileOperationCompleted);
            }
            this.InvokeAsync("ExecManageFile", new object[0], this.ExecManageFileOperationCompleted, userState);
        }
        
        private void OnExecManageFileOperationCompleted(object arg) {
            if ((this.ExecManageFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecManageFileCompleted(this, new ExecManageFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#EnumsViewer", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.EnumsViewer")]
        public bool EnumsViewer() {
            object[] results = this.Invoke("EnumsViewer", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void EnumsViewerAsync() {
            this.EnumsViewerAsync(null);
        }
        
        /// <remarks/>
        public void EnumsViewerAsync(object userState) {
            if ((this.EnumsViewerOperationCompleted == null)) {
                this.EnumsViewerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnumsViewerOperationCompleted);
            }
            this.InvokeAsync("EnumsViewer", new object[0], this.EnumsViewerOperationCompleted, userState);
        }
        
        private void OnEnumsViewerOperationCompleted(object arg) {
            if ((this.EnumsViewerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnumsViewerCompleted(this, new EnumsViewerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#SetApplicationDate", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        public void SetApplicationDate([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.SetApplicationDate", IsNullable=true)] string aDate) {
            this.Invoke("SetApplicationDate", new object[] {
                        aDate});
        }
        
        /// <remarks/>
        public void SetApplicationDateAsync(string aDate) {
            this.SetApplicationDateAsync(aDate, null);
        }
        
        /// <remarks/>
        public void SetApplicationDateAsync(string aDate, object userState) {
            if ((this.SetApplicationDateOperationCompleted == null)) {
                this.SetApplicationDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetApplicationDateOperationCompleted);
            }
            this.InvokeAsync("SetApplicationDate", new object[] {
                        aDate}, this.SetApplicationDateOperationCompleted, userState);
        }
        
        private void OnSetApplicationDateOperationCompleted(object arg) {
            if ((this.SetApplicationDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetApplicationDateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#SetApplicationDateIMago", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        public void SetApplicationDateIMago([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.SetApplicationDateIMago", IsNullable=true)] string aDate) {
            this.Invoke("SetApplicationDateIMago", new object[] {
                        aDate});
        }
        
        /// <remarks/>
        public void SetApplicationDateIMagoAsync(string aDate) {
            this.SetApplicationDateIMagoAsync(aDate, null);
        }
        
        /// <remarks/>
        public void SetApplicationDateIMagoAsync(string aDate, object userState) {
            if ((this.SetApplicationDateIMagoOperationCompleted == null)) {
                this.SetApplicationDateIMagoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetApplicationDateIMagoOperationCompleted);
            }
            this.InvokeAsync("SetApplicationDateIMago", new object[] {
                        aDate}, this.SetApplicationDateIMagoOperationCompleted, userState);
        }
        
        private void OnSetApplicationDateIMagoOperationCompleted(object arg) {
            if ((this.SetApplicationDateIMagoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetApplicationDateIMagoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#SetApplicationDateToSystemDate", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        public void SetApplicationDateToSystemDate() {
            this.Invoke("SetApplicationDateToSystemDate", new object[0]);
        }
        
        /// <remarks/>
        public void SetApplicationDateToSystemDateAsync() {
            this.SetApplicationDateToSystemDateAsync(null);
        }
        
        /// <remarks/>
        public void SetApplicationDateToSystemDateAsync(object userState) {
            if ((this.SetApplicationDateToSystemDateOperationCompleted == null)) {
                this.SetApplicationDateToSystemDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetApplicationDateToSystemDateOperationCompleted);
            }
            this.InvokeAsync("SetApplicationDateToSystemDate", new object[0], this.SetApplicationDateToSystemDateOperationCompleted, userState);
        }
        
        private void OnSetApplicationDateToSystemDateOperationCompleted(object arg) {
            if ((this.SetApplicationDateToSystemDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetApplicationDateToSystemDateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#SetApplicationDate2", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.SetApplicationDate2", IsNullable=true)]
        public string SetApplicationDate2([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.SetApplicationDate2", IsNullable=true)] string aDate) {
            object[] results = this.Invoke("SetApplicationDate2", new object[] {
                        aDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetApplicationDate2Async(string aDate) {
            this.SetApplicationDate2Async(aDate, null);
        }
        
        /// <remarks/>
        public void SetApplicationDate2Async(string aDate, object userState) {
            if ((this.SetApplicationDate2OperationCompleted == null)) {
                this.SetApplicationDate2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetApplicationDate2OperationCompleted);
            }
            this.InvokeAsync("SetApplicationDate2", new object[] {
                        aDate}, this.SetApplicationDate2OperationCompleted, userState);
        }
        
        private void OnSetApplicationDate2OperationCompleted(object arg) {
            if ((this.SetApplicationDate2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetApplicationDate2Completed(this, new SetApplicationDate2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#SetFiscalCompany", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        public void SetFiscalCompany([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.SetFiscalCompany")] int aCompanyId, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.SetFiscalCompany", IsNullable=true)] string aStoreCode) {
            this.Invoke("SetFiscalCompany", new object[] {
                        aCompanyId,
                        aStoreCode});
        }
        
        /// <remarks/>
        public void SetFiscalCompanyAsync(int aCompanyId, string aStoreCode) {
            this.SetFiscalCompanyAsync(aCompanyId, aStoreCode, null);
        }
        
        /// <remarks/>
        public void SetFiscalCompanyAsync(int aCompanyId, string aStoreCode, object userState) {
            if ((this.SetFiscalCompanyOperationCompleted == null)) {
                this.SetFiscalCompanyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFiscalCompanyOperationCompleted);
            }
            this.InvokeAsync("SetFiscalCompany", new object[] {
                        aCompanyId,
                        aStoreCode}, this.SetFiscalCompanyOperationCompleted, userState);
        }
        
        private void OnSetFiscalCompanyOperationCompleted(object arg) {
            if ((this.SetFiscalCompanyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFiscalCompanyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#ShowAboutFramework", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        public void ShowAboutFramework() {
            this.Invoke("ShowAboutFramework", new object[0]);
        }
        
        /// <remarks/>
        public void ShowAboutFrameworkAsync() {
            this.ShowAboutFrameworkAsync(null);
        }
        
        /// <remarks/>
        public void ShowAboutFrameworkAsync(object userState) {
            if ((this.ShowAboutFrameworkOperationCompleted == null)) {
                this.ShowAboutFrameworkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnShowAboutFrameworkOperationCompleted);
            }
            this.InvokeAsync("ShowAboutFramework", new object[0], this.ShowAboutFrameworkOperationCompleted, userState);
        }
        
        private void OnShowAboutFrameworkOperationCompleted(object arg) {
            if ((this.ShowAboutFrameworkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ShowAboutFrameworkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("HeaderInfo", Direction=System.Web.Services.Protocols.SoapHeaderDirection.InOut)]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#ExecOpenReport", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Namespace="urn:Microarea.Web.Services.ExecOpenReport")]
        public bool ExecOpenReport([System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.ExecOpenReport", IsNullable=true)] ref string reportNamespace, [System.Xml.Serialization.XmlElementAttribute(Namespace="urn:Microarea.Web.Services.ExecOpenReport", IsNullable=true)] ref string reportPath) {
            object[] results = this.Invoke("ExecOpenReport", new object[] {
                        reportNamespace,
                        reportPath});
            reportNamespace = ((string)(results[1]));
            reportPath = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ExecOpenReportAsync(string reportNamespace, string reportPath) {
            this.ExecOpenReportAsync(reportNamespace, reportPath, null);
        }
        
        /// <remarks/>
        public void ExecOpenReportAsync(string reportNamespace, string reportPath, object userState) {
            if ((this.ExecOpenReportOperationCompleted == null)) {
                this.ExecOpenReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecOpenReportOperationCompleted);
            }
            this.InvokeAsync("ExecOpenReport", new object[] {
                        reportNamespace,
                        reportPath}, this.ExecOpenReportOperationCompleted, userState);
        }
        
        private void OnExecOpenReportOperationCompleted(object arg) {
            if ((this.ExecOpenReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecOpenReportCompleted(this, new ExecOpenReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.4084.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:Microarea.Web.Services")]
    [System.Xml.Serialization.XmlRootAttribute("HeaderInfo", Namespace="urn:Microarea.Web.Services", IsNullable=true)]
    public partial class TBHeaderInfo : System.Web.Services.Protocols.SoapHeader {
        
        private string authTokenField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string AuthToken {
            get {
                return this.authTokenField;
            }
            set {
                this.authTokenField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ExecOpenTextCompletedEventHandler(object sender, ExecOpenTextCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecOpenTextCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecOpenTextCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ExecOpenFormatterCompletedEventHandler(object sender, ExecOpenFormatterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecOpenFormatterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecOpenFormatterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ExecOpenFontCompletedEventHandler(object sender, ExecOpenFontCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecOpenFontCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecOpenFontCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ExecManageFileCompletedEventHandler(object sender, ExecManageFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecManageFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecManageFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void EnumsViewerCompletedEventHandler(object sender, EnumsViewerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnumsViewerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnumsViewerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SetApplicationDateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SetApplicationDateIMagoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SetApplicationDateToSystemDateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SetApplicationDate2CompletedEventHandler(object sender, SetApplicationDate2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetApplicationDate2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetApplicationDate2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void SetFiscalCompanyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ShowAboutFrameworkCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void ExecOpenReportCompletedEventHandler(object sender, ExecOpenReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecOpenReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecOpenReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string reportNamespace {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string reportPath {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
}

#pragma warning restore 1591